%!PS-Adobe-2.0 EPSF-1.2
%%Title: (systerror.eps.pdf)
%%Creator: Ghostscript ps2epsi from systerror.ps
%%CreationDate: (D:20020422155957)
%%For:wwinter wwinter
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 106 576 321 717
save
countdictstack
mark
newpath
/showpage {} def
%%EndProlog
%%Page 1 1
/currentpacking where{pop currentpacking true setpacking}if
userdict /PDF 160 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
PDFVars begin PDF begin
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat/csfamily 
/? /! /| /: /+ /GetGlyphDirectory
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/OP here { /_OP? xdd } if
/op here { /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/OPM here { /_opmode xdd } if
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/initialize {
_defaulthalftone sethalftone
} bd
/terminate { } bd
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput {
3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes {
_categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/ri/pop ld
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
/_sfc { _fc L1setcolor } dd
/_ssc { _sc L1setcolor } dd
/scn { sc } bd
/SCN { SC } bd
/gs
{ begin
/SA here { /_sa? xdd } if
/TR here
{
dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} if
/HT here { sethalftone } if
/FL here { i } if
currentdict gsDI
end
} bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {re f} bd
/setoverprint where
{ pop }
{ /setoverprint { pop } bd }
ifelse
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
dup {currentfont /Encoding get dup length 33 ge 
{32 get /space eq and}{pop}ifelse
}if
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
_intT
{currentpoint iTm moveto}
if
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
PDF /PDFImage 38 dict put
PDF /PDFIVars 20 dict put
PDF /PDFImage get begin
/initialize { PDFImage begin } bd
/terminate { end } bd
/nulldict 0 dict def
/gv { PDFIVars exch get } bd
/pv { PDFIVars 3 1 roll put } bd
/BI { save /savelevel exch pv mark } bd
/EI { /savelevel gv restore } bd
end
PDF /PDFImage get begin
Level2? not StartLoad {
PDFIVars /PDFImages 4 dict put
/InstallImage {
PDFIVars /PDFImages get 3 1 roll put
} bd
/ColorComps? {
dup type /arraytype eq { 0 get } if /PDFImages gv exch get 0 get
} bd
/ColorProc? {
dup type /arraytype eq { 0 get } if /PDFImages gv exch get 1 get
} bd
/ImageFilter { /DataSource load } bd
/ID {
5 counttomark 2 idiv
dup 3 1 roll add
dict begin
{ def } repeat
cleartomark
currentdict
end
PDFIVars begin begin
/ImageMatrix [ Width 0 0 Height neg 0 Height ] def
/ColorSpace here { pop }
{ /ColorSpace /DeviceGray def } ifelse
ColorSpace ColorProc? exec
end end
} bd
/DeviceGray [ 1
{
/ImageMask here not { false } if
{
sfc
Width Height
Decode 0 get 1 eq
ImageMatrix ImageFilter imagemask
} {
Width Height BitsPerComponent ImageMatrix ImageFilter image
} ifelse
} bind
] InstallImage
} EndLoad
end
PDF /PDFImage get begin
Level2? StartLoad {
/ID {
5 counttomark 2 idiv
dup 3 1 roll add
dict begin
{ def } repeat
cleartomark
currentdict
end
begin
/ImageType here { pop } { /ImageType 1 def } ifelse
/ImageMatrix [ Width 0 0 Height neg 0 Height ] def
/ImageMask here { not } { true } ifelse
{ /ImageMask false def } if
ImageMask not { ColorSpace setcolorspace } if
/Intent here { ri } if
SLBApplies?
{ ApplySLB }
{
mark
/DataSource here { } { currentfile } ifelse
/Filter here {
dup type /arraytype eq { length } { pop 1 } ifelse
1 sub 0 1 3 -1 roll {
/DecodeParms here {
dup type /arraytype eq {
1 index get
} if
dup null eq { pop } { exch } ifelse
} if
Filter dup type /arraytype eq
{ exch get } { exch pop } ifelse
filter
dup
} for
} if
/DataSource exch def
currentdict /ImageMask here not {false} if
{ sfc imagemask } { image } ifelse
counttomark
{ dup status
dup currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
}
repeat
pop
}ifelse
end
} [/Width /Height /ImageMask /ColorSpace /Filter] bld
/SLBApplies?
{
{
languagelevel 3 lt {stop} if
currentsystemparams /SourceListBypass known not {stop} if
currentsystemparams /SourceListBypass get not {stop} if
currentdict /Filter known not {stop} if
Filter /CCITTFaxDecode ne {stop} if
currentdict /DecodeParms known not {stop} if
DecodeParms /K known not {stop} if
DecodeParms /K get -1 ne {stop} if
} stopped not
} [/DecodeParms] bld
/ApplySLB
{
{
/UncompressedLength
Width
DecodeParms /EncodedByteAlign getifknown
{ { 7 add 3 bitshift } if } if
Height mul def
/DataSource dup here { } {currentfile} ifelse
5 dict begin
/Filter Filter def
/DecodeParms DecodeParms def
/Intent 3 def
/AsyncRead false def
/CloseSource false def
currentdict end /ReusableStreamDecode filter def
currentdict /ImageMask here not {false} if
{ sfc imagemask } { image } ifelse
} exec
} [/Width /DecodeParms /Height] bld
currentdict readonly pop
} EndLoad
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText PDFImage]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFImage PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Times-Roman
[/N6/Times-Roman -1 TZ
PDFVars/TermAll get exec end end

userdict /pgsave save put
PDFVars begin PDF begin PDFVars/InitAll get exec
8.5 -50 translate
10 dict begin
T3Defs
/FontType 3 def
/FontName /N8 def
/FontMatrix [1 
0 
0 
1 
0 
0 ]def
/FontBBox [0 
0 
59 
55 ]def
/Encoding [/a0 /a1 /a2 /a3 /a4 /a5 /a6 /a7 /a8 /a9 /a10 /a11 /a12 /a13 /a14 /a15 /a16 /a17 
/a18 /a19 /a20 /a21 /a22 /a23 /a24 /a25 /a26 /a27 /a28 /a29 /a30 /a31 /a32 /a33 
/a34 /a35 /a36 /a37 /a38 /a39 /a40 /a41 /a42 /a43 /a44 /a45 /a46 /a47 /a48 /a49 
/a50 /a51 /a52 /a53 /a54 /a55 /a56 /a57 /a58 /a59 /a60 /a61 /a62 /a63 /a64 /a65 
/a66 /a67 /a68 /a69 /a70 /a71 /a72 /a73 /a74 /a75 /a76 /a77 /a78 /a79 /a80 /a81 
/a82 /a83 /a84 /a85 /a86 /a87 /a88 /a89 /a90 /a91 /a92 /a93 /a94 /a95 /a96 /a97 
/a98 /a99 /a100 /a101 /a102 /a103 /a104 /a105 /a106 /a107 /a108 /a109 /a110 
/a111 /a112 /a113 /a114 /a115 /a116 /a117 /a118 /a119 /a120 /a121 /a122 /a123 
/a124 /a125 /a126 /a127 /a128 /a129 /a130 /a131 /a132 /a133 /a134 /a135 /a136 
/a137 /a138 /a139 /a140 /a141 /a142 /a143 /a144 /a145 /a146 /a147 /a148 /a149 
/a150 /a151 /a152 /a153 /a154 /a155 /a156 /a157 /a158 /a159 /a160 /a161 /a162 
/a163 /a164 /a165 /a166 /a167 /a168 /a169 /a170 /a171 /a172 /a173 /a174 /a175 
/a176 /a177 /a178 /a179 /a180 /a181 /a182 /a183 /a184 /a185 /a186 /a187 /a188 
/a189 /a190 /a191 /a192 /a193 /a194 /a195 /a196 /a197 /a198 /a199 /a200 /a201 
/a202 /a203 /a204 /a205 /a206 /a207 /a208 /a209 /a210 /a211 /a212 /a213 /a214 
/a215 /a216 /a217 /a218 /a219 /a220 /a221 /a222 /a223 /a224 /a225 /a226 /a227 
/a228 /a229 /a230 /a231 /a232 /a233 /a234 /a235 /a236 /a237 /a238 /a239 /a240 
/a241 /a242 /a243 /a244 /a245 /a246 /a247 /a248 /a249 /a250 /a251 /a252 /a253 
/a254 /a255 ] def
/GlyphProcs 3 dict begin
/.notdef {250 0 d0} bind def
/a0  { save
 {
0 0 0 0 38 55 d1
38 0 0 55 0 0 cm

_op? setoverprint
BI
/Width 38
/Height 55
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFF01FFFFCFFC007FFFCFF03E1FFFCFF0FF0FFFCFE1FF87FFCFC1FFC3FFCFC1F
FE1FFCF83FFF0FFCF83FFF07FCF83FFF87FCF83FFF83FCF03FFFC1FCF03FFFC1
FCF03FFFC0FCF03FFFE0FCF03FFFE0FCF03FFFE07CF01FFFF07CF01FFFF03CF0
1FFFF03CF01FFFF03CF01FFFF81CF01FFFF81CF80FFFF81CF80FFFF80CF80000
000CF80000000CF80000000CFC07FFFC04FC07FFFE04FC07FFFE04FE03FFFE04
FE03FFFE04FE03FFFE04FF01FFFF00FF01FFFF00FF81FFFF00FF80FFFF00FF80
FFFF00FFC0FFFF80FFE07FFF80FFE07FFF80FFF03FFF80FFF03FFF80FFF81FFF
80FFFC1FFF80FFFC0FFF84FFFE0FFF84FFFF07FF84FFFF83FF8CFFFFC1FF0CFF
FFE0FF1CFFFFF07E1CFFFFFC003CFFFFFF00FC>
} 0 get}
ID 
EI

} exec  restore } bind def
/a1  { save
 {
0 0 0 0 59 53 d1
59 0 0 53 0 0 cm

_op? setoverprint
BI
/Width 59
/Height 53
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFFFFFFFFFFFFFC0FFFFFFFFFFFFFF00FFFFFFFFFFFFFE20FFFFFFFFFFFFFC20
FFFFFFFFFFFFF8E0FFFFFFFFFFFFE1E0FFFFFFFFFFFFC3E0FFFFFFFFFFFF87E0
FFFFFFFFFFFF0FE0FFFFFFFFFFFE3FE0FFFFFFFFFFF87FE0FFFFFFFFFFF0FFE0
FFFFFFFFFFE1FFE0FF7FFFFFFFC3FFE0FE7FFFFFFF87FFE0FEFFFFFFFF0FFFE0
FEFFFFFFFE1FFFE0FCFFFFFFFC3FFFE0FCFFFFFFF87FFFE0F87FFFFFF0FFFFE0
F803FFFFE0FFFFE0F80007FFC1FFFFE0F000000F83FFFFE0F800000007FFFFE0
FC00000000FFFFE0FF0000000001FFE0FFF00000000003E0FFFFE000000000E0
FFFFFF8000000020FFFFFFE000000020FFFFFFE1FC000000FFFFFFC3FFFC0000
FFFFFF87FFFFF000FFFFFF0FFFFFFC00FFFFFE1FFFFFFE20FFFFFC3FFFFFFE20
FFFFF87FFFFFFE60FFFFF0FFFFFFFCE0FFFFE1FFFFFFF9E0FFFFC3FFFFFFF3E0
FFFF87FFFFFFE7E0FFFF0FFFFFFFCFE0FFFE1FFFFFFFFFE0FFF83FFFFFFFFFE0
FFF07FFFFFFFFFE0FFE0FFFFFFFFFFE0FFC1FFFFFFFFFFE0FF83FFFFFFFFFFE0
FF0FFFFFFFFFFFE0FE1FFFFFFFFFFFE0FC3FFFFFFFFFFFE0FCFFFFFFFFFFFFE0
FDFFFFFFFFFFFFE0>
} 0 get}
ID 
EI

} exec  restore } bind def
currentdict end def
FontName currentdict end
definefont pop
[/A/N8 -1 TZ
0 0 595 842 RC
0.09999 0 0 0.09999 0 0 cm

q
Q
q
915 6248 m
915 7672 l
3220 7672 l
3220 6248 l
h
W n 

2.5 w
1 J
1 j
1245.39999 6470.87998 m
1245.39999 6482.55999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 113.53999 638.31298 Tm
(0.0009)Tj 
ET
Q
1690.54998 6470.87998 m
1690.54998 6482.55999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 156.05499 638.25099 Tm
(0.00095)Tj 
ET
Q
2135.71998 6470.87998 m
2135.71998 6482.55999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 204.57199 638.31298 Tm
(0.001)Tj 
ET
Q
2580.88999 6470.87998 m
2580.88999 6482.55999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 245.08898 638.25099 Tm
(0.00105)Tj 
ET
Q
3026.04998 6470.87998 m
3026.04998 6482.55999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 291.60499 638.31298 Tm
(0.0011)Tj 
ET
Q
1.25 w
1334.43998 6470.87998 m
1334.43998 6477.88999 l
S 
1423.46998 6470.87998 m
1423.46998 6477.88999 l
S 
1512.5 6470.87998 m
1512.5 6477.88999 l
S 
1601.53999 6470.87998 m
1601.53999 6477.88999 l
S 
1779.58999 6470.87998 m
1779.58999 6477.88999 l
S 
1868.61999 6470.87998 m
1868.61999 6477.88999 l
S 
1957.65998 6470.87998 m
1957.65998 6477.88999 l
S 
2046.68998 6470.87998 m
2046.68998 6477.88999 l
S 
2224.75999 6470.87998 m
2224.75999 6477.88999 l
S 
2313.78999 6470.87998 m
2313.78999 6477.88999 l
S 
2402.82998 6470.87998 m
2402.82998 6477.88999 l
S 
2491.85998 6470.87998 m
2491.85998 6477.88999 l
S 
2669.90998 6470.87998 m
2669.90998 6477.88999 l
S 
2758.93998 6470.87998 m
2758.93998 6477.88999 l
S 
2847.97999 6470.87998 m
2847.97999 6477.88999 l
S 
2937.00999 6470.87998 m
2937.00999 6477.88999 l
S 
2.5 w
1200.88999 6470.87998 m
3070.55999 6470.87998 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 199.91598 627.56298 Tm
(sin)Tj 
/N6 5.68798 Tf
9.25 3.18699 Td
(2)Tj 
/N6 8 Tf
3.875 -3.18699 Td
(2)Tj 
/N8 1 Tf
0.09999 0 0 -0.09999 216.79998 633 Tm
(\000)Tj 
/N6 5.68798 Tf
1 0 0 1 220.54098 626.31298 Tm
(13)Tj 
ET
Q
1200.88999 6495.10998 m
1212.56999 6495.10998 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 647.63499 Tm
(0)Tj 
ET
Q
1200.88999 6656.69999 m
1212.56999 6656.69999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 663.79499 Tm
(1)Tj 
ET
Q
1200.88999 6818.29998 m
1212.56999 6818.29998 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 679.95399 Tm
(2)Tj 
ET
Q
1200.88999 6979.87998 m
1212.56999 6979.87998 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 696.11199 Tm
(3)Tj 
ET
Q
1200.88999 7141.46998 m
1212.56999 7141.46998 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 712.27198 Tm
(4)Tj 
ET
Q
1200.88999 7303.06999 m
1212.56999 7303.06999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 728.40098 Tm
(5)Tj 
ET
Q
1200.88999 7464.64999 m
1212.56999 7464.64999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 744.58898 Tm
(6)Tj 
ET
Q
1200.88999 7626.23999 m
1212.56999 7626.23999 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 8 Tf
1 0 0 1 111.75099 760.74899 Tm
(7)Tj 
ET
Q
1.25 w
1200.88999 6527.42999 m
1207.89999 6527.42999 l
S 
1200.88999 6559.73999 m
1207.89999 6559.73999 l
S 
1200.88999 6592.06999 m
1207.89999 6592.06999 l
S 
1200.88999 6624.37998 m
1207.89999 6624.37998 l
S 
1200.88999 6689.02999 m
1207.89999 6689.02999 l
S 
1200.88999 6721.33999 m
1207.89999 6721.33999 l
S 
1200.88999 6753.66999 m
1207.89999 6753.66999 l
S 
1200.88999 6785.96998 m
1207.89999 6785.96998 l
S 
1200.88999 6850.60998 m
1207.89999 6850.60998 l
S 
1200.88999 6882.92999 m
1207.89999 6882.92999 l
S 
1200.88999 6915.23999 m
1207.89999 6915.23999 l
S 
1200.88999 6947.56999 m
1207.89999 6947.56999 l
S 
1200.88999 7012.19999 m
1207.89999 7012.19999 l
S 
1200.88999 7044.50999 m
1207.89999 7044.50999 l
S 
1200.88999 7076.83999 m
1207.89999 7076.83999 l
S 
1200.88999 7109.14999 m
1207.89999 7109.14999 l
S 
1200.88999 7173.77999 m
1207.89999 7173.77999 l
S 
1200.88999 7206.10998 m
1207.89999 7206.10998 l
S 
1200.88999 7238.41999 m
1207.89999 7238.41999 l
S 
1200.88999 7270.73999 m
1207.89999 7270.73999 l
S 
1200.88999 7335.37998 m
1207.89999 7335.37998 l
S 
1200.88999 7367.69999 m
1207.89999 7367.69999 l
S 
1200.88999 7400.00999 m
1207.89999 7400.00999 l
S 
1200.88999 7432.33999 m
1207.89999 7432.33999 l
S 
1200.88999 7496.96998 m
1207.89999 7496.96998 l
S 
1200.88999 7529.27999 m
1207.89999 7529.27999 l
S 
1200.88999 7561.60998 m
1207.89999 7561.60998 l
S 
1200.88999 7593.91999 m
1207.89999 7593.91999 l
S 
2.5 w
1200.88999 6470.87998 m
1200.88999 7626.38999 l
S 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 101.69999 705.59999 Tm
(\001)Tj 
/N6 5.68798 Tf
0 1 -1 0 102.70799 705.61399 Tm
(2)Tj 
ET
Q
1245.39999 7614.70999 m
1245.39999 7626.38999 l
S 
1690.54998 7614.70999 m
1690.54998 7626.38999 l
S 
2135.71998 7614.70999 m
2135.71998 7626.38999 l
S 
2580.88999 7614.70999 m
2580.88999 7626.38999 l
S 
3026.04998 7614.70999 m
3026.04998 7626.38999 l
S 
1.25 w
1334.43998 7619.37998 m
1334.43998 7626.38999 l
S 
1423.46998 7619.37998 m
1423.46998 7626.38999 l
S 
1512.5 7619.37998 m
1512.5 7626.38999 l
S 
1601.53999 7619.37998 m
1601.53999 7626.38999 l
S 
1779.58999 7619.37998 m
1779.58999 7626.38999 l
S 
1868.61999 7619.37998 m
1868.61999 7626.38999 l
S 
1957.65998 7619.37998 m
1957.65998 7626.38999 l
S 
2046.68998 7619.37998 m
2046.68998 7626.38999 l
S 
2224.75999 7619.37998 m
2224.75999 7626.38999 l
S 
2313.78999 7619.37998 m
2313.78999 7626.38999 l
S 
2402.82998 7619.37998 m
2402.82998 7626.38999 l
S 
2491.85998 7619.37998 m
2491.85998 7626.38999 l
S 
2669.90998 7619.37998 m
2669.90998 7626.38999 l
S 
2758.93998 7619.37998 m
2758.93998 7626.38999 l
S 
2847.97999 7619.37998 m
2847.97999 7626.38999 l
S 
2937.00999 7619.37998 m
2937.00999 7626.38999 l
S 
2.5 w
1200.88999 7626.38999 m
3070.55999 7626.38999 l
S 
3058.87998 6495.10998 m
3070.55999 6495.10998 l
S 
3058.87998 6656.69999 m
3070.55999 6656.69999 l
S 
3058.87998 6818.29998 m
3070.55999 6818.29998 l
S 
3058.87998 6979.87998 m
3070.55999 6979.87998 l
S 
3058.87998 7141.46998 m
3070.55999 7141.46998 l
S 
3058.87998 7303.06999 m
3070.55999 7303.06999 l
S 
3058.87998 7464.64999 m
3070.55999 7464.64999 l
S 
3058.87998 7626.23999 m
3070.55999 7626.23999 l
S 
1.25 w
3063.54998 6527.42999 m
3070.55999 6527.42999 l
S 
3063.54998 6559.73999 m
3070.55999 6559.73999 l
S 
3063.54998 6592.06999 m
3070.55999 6592.06999 l
S 
3063.54998 6624.37998 m
3070.55999 6624.37998 l
S 
3063.54998 6689.02999 m
3070.55999 6689.02999 l
S 
3063.54998 6721.33999 m
3070.55999 6721.33999 l
S 
3063.54998 6753.66999 m
3070.55999 6753.66999 l
S 
3063.54998 6785.96998 m
3070.55999 6785.96998 l
S 
3063.54998 6850.60998 m
3070.55999 6850.60998 l
S 
3063.54998 6882.92999 m
3070.55999 6882.92999 l
S 
3063.54998 6915.23999 m
3070.55999 6915.23999 l
S 
3063.54998 6947.56999 m
3070.55999 6947.56999 l
S 
3063.54998 7012.19999 m
3070.55999 7012.19999 l
S 
3063.54998 7044.50999 m
3070.55999 7044.50999 l
S 
3063.54998 7076.83999 m
3070.55999 7076.83999 l
S 
3063.54998 7109.14999 m
3070.55999 7109.14999 l
S 
3063.54998 7173.77999 m
3070.55999 7173.77999 l
S 
3063.54998 7206.10998 m
3070.55999 7206.10998 l
S 
3063.54998 7238.41999 m
3070.55999 7238.41999 l
S 
3063.54998 7270.73999 m
3070.55999 7270.73999 l
S 
3063.54998 7335.37998 m
3070.55999 7335.37998 l
S 
3063.54998 7367.69999 m
3070.55999 7367.69999 l
S 
3063.54998 7400.00999 m
3070.55999 7400.00999 l
S 
3063.54998 7432.33999 m
3070.55999 7432.33999 l
S 
3063.54998 7496.96998 m
3070.55999 7496.96998 l
S 
3063.54998 7529.27999 m
3070.55999 7529.27999 l
S 
3063.54998 7561.60998 m
3070.55999 7561.60998 l
S 
3063.54998 7593.91999 m
3070.55999 7593.91999 l
S 
2.5 w
3070.55999 6470.87998 m
3070.55999 7626.38999 l
S 
Q
q
1200 6470 m
1200 7627 l
3071 7627 l
3071 6470 l
h
W n 
0.85089 g

1788.50999 6495.10998 703.35398 1098.80999 rf
5 w
1 J
1 j
2135.71998 6818.29998 m
1788.50999 6818.29998 l
S 
0 g
1857.93998 6800.92999 m
1788.5 6818.28999 l
1857.93998 6835.64999 l
f 
0.92848 w
1857.93998 6800.92999 m
1788.5 6818.28999 l
1857.93998 6835.64999 l
1857.93998 6800.92999 l
S 
5 w
2135.71998 6818.29998 m
2491.85998 6818.29998 l
S 
2420.62998 6836.09999 m
2491.84999 6818.28999 l
2420.62998 6800.48999 l
f 
0.95228 w
2420.62998 6836.09999 m
2491.84999 6818.28999 l
2420.62998 6800.48999 l
2420.62998 6836.09999 l
S 
1.86959 w
1245.39999 7162.93998 m
1334.43998 7034.26998 l
1423.46998 6919.72999 l
1512.5 6819.15998 l
1601.53999 6732.43998 l
1690.54998 6659.39999 l
1779.58999 6599.91999 l
1868.61999 6553.88999 l
1957.65998 6521.14999 l
2046.68998 6501.59999 l
2135.71998 6495.10998 l
2224.75999 6501.57998 l
2313.78999 6520.82998 l
2402.82998 6552.81999 l
2491.85998 6597.39999 l
2580.88999 6654.43998 l
2669.90998 6723.85998 l
2758.93998 6805.56999 l
2847.97999 6899.42999 l
2937.00999 7005.33999 l
3026.04998 7123.22999 l
S 
[5 30 ]0 d
1245.39999 7589.27999 m
1334.43998 7378.07998 l
1423.46998 7190.17999 l
1512.5 7025.32998 l
1601.53999 6883.25 l
1690.54998 6763.68998 l
1779.58999 6666.36999 l
1868.61999 6591.11999 l
1957.65998 6537.61999 l
2046.68998 6505.70999 l
2135.71998 6495.10998 l
2224.75999 6505.62998 l
2313.78999 6537.03999 l
2402.82998 6589.12998 l
2491.85998 6661.67999 l
2580.88999 6754.50999 l
2669.90998 6867.37998 l
2758.93998 7000.14999 l
2847.97999 7152.55999 l
2937.00999 7324.45999 l
3026.04998 7515.66999 l
S 
[]0 d
5 w
1200.88999 6656.69999 m
3070.55999 6656.69999 l
S 
1690.54998 6470.87998 m
1690.54998 7626.38999 l
S 
2580.88999 6470.87998 m
2580.88999 7626.38999 l
S 
2135.71998 6495.10998 m
2580.88999 6495.10998 l
S 
2491.84999 6517.36999 m
2580.87998 6495.11999 l
2491.84999 6472.85998 l
f 
1.19044 w
2491.84999 6517.36999 m
2580.87998 6495.11999 l
2491.84999 6472.85998 l
2491.84999 6517.36999 l
S 
5 w
2135.71998 6495.10998 m
1690.54998 6495.10998 l
S 
1779.59999 6472.85998 m
1690.55999 6495.11999 l
1779.59999 6517.36999 l
f 
1.19046 w
1779.59999 6472.85998 m
1690.55999 6495.11999 l
1779.59999 6517.36999 l
1779.59999 6472.85998 l
S 
Q
q

5 w
2 J
-60 8423.75 m
-460 8423.75 l
0 8483.75 m
0 8883.75 l
6035.61999 8423.75 m
6435.61999 8423.75 l
5975.61999 8483.75 m
5975.61999 8883.75 l
-60 0 m
-460 0 l
0 -60 m
0 -460 l
6035.61999 0 m
6435.61999 0 l
5975.61999 -60 m
5975.61999 -460 l
S 
Q
PDFVars/TermAll get exec end end
userdict /pgsave get restore
showpage
%%DocumentNeededResources:
%%+ font Times-Roman
%%DocumentSuppliedResources:
%%+ font A
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%+ procset (Adobe Acrobat - general image support) 1.2 0
%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF
