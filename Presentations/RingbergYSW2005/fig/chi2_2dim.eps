%!PS-Adobe-2.0 EPSF-1.2
%%Title: (correrror.eps.pdf)
%%Creator: Ghostscript ps2epsi from correrror.ps
%%CreationDate: (D:20020422160002)
%%For:wwinter wwinter
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 109 443 337 661
save
countdictstack
mark
newpath
/showpage {} def
%%EndProlog
%%Page 1 1
/currentpacking where{pop currentpacking true setpacking}if
userdict /PDF 160 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
PDFVars begin PDF begin
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat/csfamily 
/? /! /| /: /+ /GetGlyphDirectory
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/OP here { /_OP? xdd } if
/op here { /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/OPM here { /_opmode xdd } if
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/initialize {
_defaulthalftone sethalftone
} bd
/terminate { } bd
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput {
3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes {
_categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/ri/pop ld
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
/_sfc { _fc L1setcolor } dd
/_ssc { _sc L1setcolor } dd
/scn { sc } bd
/SCN { SC } bd
/gs
{ begin
/SA here { /_sa? xdd } if
/TR here
{
dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} if
/HT here { sethalftone } if
/FL here { i } if
currentdict gsDI
end
} bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {re f} bd
/setoverprint where
{ pop }
{ /setoverprint { pop } bd }
ifelse
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
dup {currentfont /Encoding get dup length 33 ge 
{32 get /space eq and}{pop}ifelse
}if
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
_intT
{currentpoint iTm moveto}
if
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
PDF /PDFImage 38 dict put
PDF /PDFIVars 20 dict put
PDF /PDFImage get begin
/initialize { PDFImage begin } bd
/terminate { end } bd
/nulldict 0 dict def
/gv { PDFIVars exch get } bd
/pv { PDFIVars 3 1 roll put } bd
/BI { save /savelevel exch pv mark } bd
/EI { /savelevel gv restore } bd
end
PDF /PDFImage get begin
Level2? not StartLoad {
PDFIVars /PDFImages 4 dict put
/InstallImage {
PDFIVars /PDFImages get 3 1 roll put
} bd
/ColorComps? {
dup type /arraytype eq { 0 get } if /PDFImages gv exch get 0 get
} bd
/ColorProc? {
dup type /arraytype eq { 0 get } if /PDFImages gv exch get 1 get
} bd
/ImageFilter { /DataSource load } bd
/ID {
5 counttomark 2 idiv
dup 3 1 roll add
dict begin
{ def } repeat
cleartomark
currentdict
end
PDFIVars begin begin
/ImageMatrix [ Width 0 0 Height neg 0 Height ] def
/ColorSpace here { pop }
{ /ColorSpace /DeviceGray def } ifelse
ColorSpace ColorProc? exec
end end
} bd
/DeviceGray [ 1
{
/ImageMask here not { false } if
{
sfc
Width Height
Decode 0 get 1 eq
ImageMatrix ImageFilter imagemask
} {
Width Height BitsPerComponent ImageMatrix ImageFilter image
} ifelse
} bind
] InstallImage
} EndLoad
end
PDF /PDFImage get begin
Level2? StartLoad {
/ID {
5 counttomark 2 idiv
dup 3 1 roll add
dict begin
{ def } repeat
cleartomark
currentdict
end
begin
/ImageType here { pop } { /ImageType 1 def } ifelse
/ImageMatrix [ Width 0 0 Height neg 0 Height ] def
/ImageMask here { not } { true } ifelse
{ /ImageMask false def } if
ImageMask not { ColorSpace setcolorspace } if
/Intent here { ri } if
SLBApplies?
{ ApplySLB }
{
mark
/DataSource here { } { currentfile } ifelse
/Filter here {
dup type /arraytype eq { length } { pop 1 } ifelse
1 sub 0 1 3 -1 roll {
/DecodeParms here {
dup type /arraytype eq {
1 index get
} if
dup null eq { pop } { exch } ifelse
} if
Filter dup type /arraytype eq
{ exch get } { exch pop } ifelse
filter
dup
} for
} if
/DataSource exch def
currentdict /ImageMask here not {false} if
{ sfc imagemask } { image } ifelse
counttomark
{ dup status
dup currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
}
repeat
pop
}ifelse
end
} [/Width /Height /ImageMask /ColorSpace /Filter] bld
/SLBApplies?
{
{
languagelevel 3 lt {stop} if
currentsystemparams /SourceListBypass known not {stop} if
currentsystemparams /SourceListBypass get not {stop} if
currentdict /Filter known not {stop} if
Filter /CCITTFaxDecode ne {stop} if
currentdict /DecodeParms known not {stop} if
DecodeParms /K known not {stop} if
DecodeParms /K get -1 ne {stop} if
} stopped not
} [/DecodeParms] bld
/ApplySLB
{
{
/UncompressedLength
Width
DecodeParms /EncodedByteAlign getifknown
{ { 7 add 3 bitshift } if } if
Height mul def
/DataSource dup here { } {currentfile} ifelse
5 dict begin
/Filter Filter def
/DecodeParms DecodeParms def
/Intent 3 def
/AsyncRead false def
/CloseSource false def
currentdict end /ReusableStreamDecode filter def
currentdict /ImageMask here not {false} if
{ sfc imagemask } { image } ifelse
} exec
} [/Width /DecodeParms /Height] bld
currentdict readonly pop
} EndLoad
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText PDFImage]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFImage PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Times-Roman
[/N6/Times-Roman -1 TZ
PDFVars/TermAll get exec end end

userdict /pgsave save put
PDFVars begin PDF begin PDFVars/InitAll get exec
8.5 -50 translate
10 dict begin
T3Defs
/FontType 3 def
/FontName /N8 def
/FontMatrix [1 
0 
0 
1 
0 
0 ]def
/FontBBox [0 
0 
78 
77 ]def
/Encoding [/a0 /a1 /a2 /a3 /a4 /a5 /a6 /a7 /a8 /a9 /a10 /a11 /a12 /a13 /a14 /a15 /a16 /a17 
/a18 /a19 /a20 /a21 /a22 /a23 /a24 /a25 /a26 /a27 /a28 /a29 /a30 /a31 /a32 /a33 
/a34 /a35 /a36 /a37 /a38 /a39 /a40 /a41 /a42 /a43 /a44 /a45 /a46 /a47 /a48 /a49 
/a50 /a51 /a52 /a53 /a54 /a55 /a56 /a57 /a58 /a59 /a60 /a61 /a62 /a63 /a64 /a65 
/a66 /a67 /a68 /a69 /a70 /a71 /a72 /a73 /a74 /a75 /a76 /a77 /a78 /a79 /a80 /a81 
/a82 /a83 /a84 /a85 /a86 /a87 /a88 /a89 /a90 /a91 /a92 /a93 /a94 /a95 /a96 /a97 
/a98 /a99 /a100 /a101 /a102 /a103 /a104 /a105 /a106 /a107 /a108 /a109 /a110 
/a111 /a112 /a113 /a114 /a115 /a116 /a117 /a118 /a119 /a120 /a121 /a122 /a123 
/a124 /a125 /a126 /a127 /a128 /a129 /a130 /a131 /a132 /a133 /a134 /a135 /a136 
/a137 /a138 /a139 /a140 /a141 /a142 /a143 /a144 /a145 /a146 /a147 /a148 /a149 
/a150 /a151 /a152 /a153 /a154 /a155 /a156 /a157 /a158 /a159 /a160 /a161 /a162 
/a163 /a164 /a165 /a166 /a167 /a168 /a169 /a170 /a171 /a172 /a173 /a174 /a175 
/a176 /a177 /a178 /a179 /a180 /a181 /a182 /a183 /a184 /a185 /a186 /a187 /a188 
/a189 /a190 /a191 /a192 /a193 /a194 /a195 /a196 /a197 /a198 /a199 /a200 /a201 
/a202 /a203 /a204 /a205 /a206 /a207 /a208 /a209 /a210 /a211 /a212 /a213 /a214 
/a215 /a216 /a217 /a218 /a219 /a220 /a221 /a222 /a223 /a224 /a225 /a226 /a227 
/a228 /a229 /a230 /a231 /a232 /a233 /a234 /a235 /a236 /a237 /a238 /a239 /a240 
/a241 /a242 /a243 /a244 /a245 /a246 /a247 /a248 /a249 /a250 /a251 /a252 /a253 
/a254 /a255 ] def
/GlyphProcs 10 dict begin
/.notdef {250 0 d0} bind def
/a0  { save
 {
0 0 0 0 56 77 d1
56 0 0 77 0 0 cm

_op? setoverprint
BI
/Width 56
/Height 77
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFFFFFF8FFFFFFFFFFFF0007FFFFFFFFF80000FFFFFFFFF002007FFFFFFFC03F
E01FFFFFFF80FFF80FFFFFFF01FFFC07FFFFFE03FFFE03FFFFFC03FFFE01FFFF
F807FFFF00FFFFF00FFFFF80FFFFF00FFFFF807FFFE00FFFFF803FFFE01FFFFF
C03FFFC01FFFFFC01FFFC01FFFFFE01FFF803FFFFFE00FFF803FFFFFE00FFF80
3FFFFFE00FFF003FFFFFE007FF007FFFFFF007FF007FFFFFF007FE007FFFFFF0
03FE007FFFFFF003FE007FFFFFF003FE007FFFFFF001FC007FFFFFF001FC00FF
FFFFF801FC00FFFFFFF801FC00FFFFFFF801FC00FFFFFFF801F800FFFFFFF800
F800FFFFFFF800F800FFFFFFF800F800FFFFFFF800F800FFFFFFF800F800FFFF
FFF800F800FFFFFFF800F800FFFFFFF800F800FFFFFFF800F800FFFFFFF800F8
00FFFFFFF800F800FFFFFFF800F800FFFFFFF800F800FFFFFFF800F800FFFFFF
F800FC00FFFFFFF800FC00FFFFFFF801FC00FFFFFFF801FC00FFFFFFF801FC00
7FFFFFF001FC007FFFFFF001FE007FFFFFF003FE007FFFFFF003FE007FFFFFF0
03FF007FFFFFF003FF007FFFFFF007FF003FFFFFE007FF803FFFFFE007FF803F
FFFFE00FFF803FFFFFE00FFFC01FFFFFC01FFFC01FFFFFC01FFFE01FFFFFC03F
FFF00FFFFF803FFFF00FFFFF807FFFF807FFFF007FFFF807FFFF00FFFFFC03FF
FE01FFFFFE01FFFC03FFFFFF01FFFC07FFFFFF807FF00FFFFFFFC03FE01FFFFF
FFF003007FFFFFFFFC0000FFFFFFFFFF0007FFFFFFFFFFF8FFFFFF>
} 0 get}
ID 
EI

} exec  restore } bind def
/a1  { save
 {
0 0 0 0 55 75 d1
55 0 0 75 0 0 cm

_op? setoverprint
BI
/Width 55
/Height 75
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FC00000000007EFC00000000003EFE00000000003EFF00000000001EFF800000
00001EFFC0000000001EFFE0000000000EFFF0000000000EFFF83FFFFFFE06FF
FC3FFFFFFF86FFFE1FFFFFFFC6FFFF0FFFFFFFE2FFFF87FFFFFFF2FFFFC3FFFF
FFF0FFFFE1FFFFFFF8FFFFF0FFFFFFFEFFFFF87FFFFFFEFFFFFC3FFFFFFEFFFF
FC1FFFFFFEFFFFFE0FFFFFFEFFFFFF07FFFFFEFFFFFF83FFFFFEFFFFFFC1FFFF
FEFFFFFFE0FFFFFEFFFFFFF07FFFFEFFFFFFF87FFFFEFFFFFFFC3FFFFEFFFFFF
FC1FFFFEFFFFFFFE0FFFFEFFFFFFFF07FFFEFFFFFFFF83FFFEFFFFFFFF81FFFE
FFFFFFFFC0FFFEFFFFFFFFE07FFEFFFFFFFFE07FFEFFFFFFFFF03FFEFFFFFFFF
F01FFEFFFFFFFFF81FFEFFFFFFFFF80FFEFFFFFFFFFC07FEFFFFFFFFFC07FEFF
FFFFFFFC03FEFFFFFFFFFE03FEFFFFFFFFFE01FEFFFFFFFFFE01FEFFFFFFFFFE
01FEFFFFFFFFFF00FEFFFFFFFFFF00FEFFFFFFFFFF00FEFFFFFFFFFF00FEFFFF
FFFFFF007EFFFFFFFFFF007EFC7FFFFFFF007EFE7FFFFFFF007EFE3FFFFFFF00
7EFE3FFFFFFE007EFE1FFFFFFE007EFF1FFFFFFE007EFF0FFFFFFC007EFF0FFF
FFFC00FEFF87FFFFF800FEFF83FFFFF000FEFFC1FFFFE000FEFFC0FFFFC001FE
FFE07FFF8001FEFFF01FFE0003FEFFF801C00007FEFFF800000007FEFFFC0000
000FFEFFFE0000001FFEFFFF8000007FFEFFFFC00000FFFEFFFFF00003FFFEFF
FFFE000FFFFEFFFFFFF1FFFFFE>
} 0 get}
ID 
EI

} exec  restore } bind def
/a2  { save
 {
0 0 0 0 48 76 d1
48 0 0 76 0 0 cm

_op? setoverprint
BI
/Width 48
/Height 76
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFE003FFFFFFFF8000FFFFFFFF03F83FFFFFFE0FFE1FFFFFFC1FFF07FFFFF81F
FF83FFFFF03FFFC1FFFFF03FFFC0FFFFE03FFFE07FFFE07FFFF07FFFE07FFFF0
3FFFC07FFFF81FFFC07FFFF80FFFC07FFFFC0FFFC07FFFFC07FF807FFFFC07FF
807FFFFE03FF807FFFFE01FF807FFFFF01FF807FFFFF00FF807FFFFF00FF807F
FFFF00FF803FFFFF807F803FFFFF807F803FFFFF803F803FFFFFC03F803FFFFF
C03F803FFFFFC01F803FFFFFC01F801FFFFFE01FC01FFFFFE00FC01FFFFFE00F
C01FFFFFE00FC00FFFFFE007C00FFFFFF007C00000000007E00000000007E000
00000003E00000000003E007FFFFF803F007FFFFF803F003FFFFF803F003FFFF
FC01F803FFFFFC01F803FFFFFC01F801FFFFFE01FC01FFFFFE01FC01FFFFFE01
FC00FFFFFE00FE00FFFFFE00FE00FFFFFF00FF00FFFFFF00FF007FFFFF00FF80
7FFFFF00FF803FFFFF00FFC03FFFFF80FFC03FFFFF80FFE01FFFFF80FFF01FFF
FF80FFF00FFFFF80FFF80FFFFF80FFF807FFFF80FFFC07FFFF81FFFE03FFFF81
FFFF03FFFF81FFFF01FFFF81FFFF80FFFF83FFFFC0FFFF03FFFFE07FFF07FFFF
F03FFF07FFFFF81FFE0FFFFFFE0FFE1FFFFFFF03FC1FFFFFFFC0707FFFFFFFF0
00FFFFFFFFFF07FF>
} 0 get}
ID 
EI

} exec  restore } bind def
/a3  { save
 {
0 0 0 0 55 75 d1
55 0 0 75 0 0 cm

_op? setoverprint
BI
/Width 55
/Height 75
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFF
E00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFF
FFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE0
0FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEFFFFFFFFE00FFEF000
0000000000F0000000000000F0000000000000F0000000000000F00000000000
00F0000000000000F0000000000000F07FFFFFE01FFEF83FFFFFE01FFEFC3FFF
FFE01FFEFC1FFFFFE01FFEFE0FFFFFE01FFEFF07FFFFE01FFEFF87FFFFE01FFE
FF83FFFFE01FFEFFC1FFFFE01FFEFFE1FFFFE01FFEFFE0FFFFE01FFEFFF07FFF
E01FFEFFF87FFFE01FFEFFFC3FFFE01FFEFFFC1FFFE01FFEFFFE1FFFE01FFEFF
FF0FFFE01FFEFFFF07FFE01FFEFFFF87FFE01FFEFFFFC3FFE01FFEFFFFC1FFE0
1FFEFFFFE0FFE01FFEFFFFF0FFE01FFEFFFFF87FE01FFEFFFFF83FE01FFEFFFF
FC3FE01FFEFFFFFE1FE01FFEFFFFFE0FE01FFEFFFFFF0FE01FFEFFFFFF87E01F
FEFFFFFF83E01FFEFFFFFFC3E01FFEFFFFFFE1E01FFEFFFFFFF0E01FFEFFFFFF
F0E01FFEFFFFFFF8601FFEFFFFFFFC201FFEFFFFFFFC001FFEFFFFFFFE001FFE
FFFFFFFF001FFEFFFFFFFF801FFEFFFFFFFF801FFEFFFFFFFFC01FFEFFFFFFFF
E01FFEFFFFFFFFE01FFEFFFFFFFFF01FFEFFFFFFFFF81FFEFFFFFFFFF81FFEFF
FFFFFFFC1FFEFFFFFFFFFE1FFE>
} 0 get}
ID 
EI

} exec  restore } bind def
/a4  { save
 {
0 0 0 0 51 77 d1
51 0 0 77 0 0 cm

_op? setoverprint
BI
/Width 51
/Height 77
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFFFC3FFFFFFE0FFF00007FFFFE0FFC00000FFFFE0FF0000001FFFE0FE000030
07FFE0FE0001FF03FFE0FE0007FFC0FFE0FE000FFFE07FE0FE003FFFF03FE0FE
007FFFF81FE0FF01FFFFFC0FE0FFFFFFFFFE07E0FFFFFFFFFE03E0FFFFFFFFFF
03E0FFFFFFFFFF01E0FFFFFFFFFF81E0FFFFFFFFFF80E0FFFFFFFFFF80E0FFFF
FFFFFFC060FFFFFFFFFFC060FFFFFFFFFFC060FFFFFFFFFFC060FFFFFFFFFFC0
20FFFFFFFFFFC020FFFFFFFFFFC020FFFFFFFFFFC020FFFFFFFFFFC020FFFFFF
FFFFC020FFFFFFFFFFC020FFFFFFFFFF8020FFFFFFFFFF8020FFFFFFFFFF8020
FFFFFFFFFF0020FFFFFFFFFF0020FFFFFFFFFE0020FFFFFFFFFE0060FFFFFFFF
FC0060FFFFFFFFF80060FFFFFFFFF000E0FFFFFFFFE000E0FFFFFFFFC001E0FF
FFFFFF0001E0FFFFFFFC0003E0FFFFFFF00003E0FFFFFFC00007E0FFFFFE0000
0FE0FFFFE000001FE0FFC00000003FE0FFC00000007FE0FFC0000000FFE0FFE0
000003FFE0FFE000000FFFE0FFF000003FFFE0FFF00000FFFFE0FFF80007FFFF
E0FFF8007FFFFFE0FFFC0FFFFFFFE0FFFC1FFFFFFFE0FFFE1FFFFFFFE0FFFE0F
FFFFFFE0FFFF0FFFFFFFE0FFFF07FFFFFFE0FFFF07FFFFFFE0FFFF83FFFFFFE0
FFFF83FFFFFFE0FFFFC1FFFFFFE0FFFFC0000001E0FFFFE0000001E0FFFFE000
0000E0FFFFF0000000E0FFFFF0000000E0FFFFF800000060FFFFF800000060FF
FFF800000020FFFFFC00000020FFFFFFFFFFFF00FFFFFFFFFFFF80>
} 0 get}
ID 
EI

} exec  restore } bind def
/a5  { save
 {
0 0 0 0 55 77 d1
55 0 0 77 0 0 cm

_op? setoverprint
BI
/Width 55
/Height 77
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFFFFFFC7FFFFEFFFFFF0001FFFEFFFFFC00007FFEFFFFF000C01FFEFFFFC00F
F807FEFFFF803FFE03FEFFFF007FFF01FEFFFE00FFFF80FEFFFC01FFFFC07EFF
F803FFFFC03EFFF807FFFFE01EFFF007FFFFE01EFFE00FFFFFF00EFFE00FFFFF
F00EFFE01FFFFFF006FFC01FFFFFF006FFC01FFFFFF802FF801FFFFFF802FF80
3FFFFFF802FF803FFFFFF802FF803FFFFFF800FF003FFFFFF800FF003FFFFFF8
00FF007FFFFFF800FF007FFFFFF800FF007FFFFFF800FE007FFFFFF800FE007F
FFFFF800FE007FFFFFF800FE007FFFFFF000FE007FFFFFF000FE007FFFFFF000
FE007FFFFFF002FE007FFFFFE002FE007FFFFFE002FE007FFFFFE002FE007FFF
FFC006FE003FFFFF8006FE003FFFFF800EFE001FFFFF000EFF001FFFFE001EFF
000FFFFC003EFF0003FFF0003EFF00007FC0007EFF0000000001FEFF800C0000
03FEFF800F000007FEFF800FC0003FFEFFC007F801FFFEFFC007FFFFFFFEFFC0
07FFFFFFFEFFE003FFFFFFFEFFE003FFFFFFFEFFF001FFFFFFFEFFF001FFFFFF
FEFFF800FFFFFFFEFFFC00FFFFFFFEFFFC007FFFFFFEFFFE007FFFFFFEFFFF00
3FFFFFFEFFFF801FFFFFFEFFFF801FFFFFFEFFFFC00FFFFFFEFFFFE007FFFFFE
FFFFF003FFFFFEFFFFF801FFFFFEFFFFFE00FFFFFEFFFFFF003FFFFEFFFFFF80
1FFFFEFFFFFFE00FFFFEFFFFFFF003FFFEFFFFFFFC00FFFEFFFFFFFF003FFEFF
FFFFFFC007FEFFFFFFFFF800FEFFFFFFFFFF000EFFFFFFFFFFFC0E>
} 0 get}
ID 
EI

} exec  restore } bind def
/a6  { save
 {
0 0 0 0 52 74 d1
52 0 0 74 0 0 cm

_op? setoverprint
BI
/Width 52
/Height 74
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFFFFC07FFFFF0FFFFFC03FFFFF0FFFFFE03FFFFF0FFFFFE03FFFFF0FFFFFE01
FFFFF0FFFFFF01FFFFF0FFFFFF01FFFFF0FFFFFF01FFFFF0FFFFFF80FFFFF0FF
FFFF80FFFFF0FFFFFF80FFFFF0FFFFFFC07FFFF0FFFFFFC07FFFF0FFFFFFC07F
FFF0FFFFFFE03FFFF0FFFFFFE03FFFF0FFFFFFE03FFFF0FFFFFFF01FFFF0FFFF
FFF01FFFF0FFFFFFF01FFFF0FFFFFFF80FFFF0FFFFFFF80FFFF0FFFFFFF80FFF
F0FFFFFFFC07FFF0FFFFFFFC07FFF0FFFFFFFC07FFF0FFFFFFFE03FFF0FFFFFF
FE03FFF0FFFFFFFE03FFF0FFFFFFFF01FFF0FFFFFFFF01FFF0FFFFFFFF01FFF0
FFFFFFFF80FFF0FFFFFFFF80FFF0FFFFFFFF80FFF0FFFFFFFFC07FF0FFFFFFFF
C07FF0FFFFFFFFC07FF0FFFFFFFFE03FF0FFFFFFFFE03FF0FFFFFFFFE03FF0FF
FFFFFFF03FF0FFFFFFFFF01FF0FFFFFFFFF01FF0FFFFFFFFF81FF0FFFFFFFFF8
0FF0FFFFFFFFF80FF0FFFFFFFFFC0FF0FFFFFFFFFC07F0FFFFFFFFFC07F0FFFF
FFFFFE07F0FFFFFFFFFE03F0FFFFFFFFFE03F0FFFFFFFFFF03F0FFFFFFFFFF01
F0FFFFFFFFFF01F0FFFFFFFFFF81F0FCFFFFFFFF80F0FCFFFFFFFF80F0FC7FFF
FFFFC0F0FC3FFFFFFFC070FE3FFFFFFFC070FE1FFFFFFFE070FF0FFFFFFFE030
FF07FFFFFFE030FF00FFFFFFF030FF800000000010FF800000000010FFC00000
000010FFC00000000000FFC00000000000FFE00000000000FFE00000000000FF
E00000000000>
} 0 get}
ID 
EI

} exec  restore } bind def
/a7  { save
 {
0 0 0 0 78 64 d1
78 0 0 64 0 0 cm

_op? setoverprint
BI
/Width 78
/Height 64
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<FFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFFF80FFFFFFFFFFFFFFFFFE00FFFF
FFFFFFFFFFFFF000FFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFF0000FFFFFFFF
FFFFFFF80000FFFFFFFFFFFFFFE00000FFFFFFFFFFFFFF000800FFFFFFFFFFFF
FC003800FFFFFFFFFFFFE001F800FFFFFFFFFFFF8007F800FFFFFFFFFFFE003F
F800FFFFFFFFFFF000FFF800FFFFFFFFFFC007FFF800FFFFFFFFFE001FFFF800
FFFFFFFFF800FFFFF800FFFFFFFFE003FFFFF800FFFFFFFF001FFFFFF800FFFF
FFFC007FFFFFF800FFFFFFE003FFFFFFF800FFFFFF800FFFFFFFF800FFFFFC00
3FFFFFFFF800FFFFF001FFFFFFFFF800FFFFC007FFFFFFFFF800FFFE003FFFFF
FFFFF800FFF800FFFFFFFFFFF800FFC007FFFFFFFFFFF800FF001FFFFFFFFFFF
F800F80007FFFFFFFFFFF800E00000FFFFFFFFFFF800E000003FFFFFFFFFF800
F0000007FFFFFFFFF800FC000001FFFFFFFFF800FF8000003FFFFFFFF800FFE0
00000FFFFFFFF800FFF8000001FFFFFFF800FFFF0000007FFFFFF800FFFFC000
000FFFFFF800FFFFF0000003FFFFF800FFFFFE000000FFFFF800FFFFFF800000
1FFFF800FFFFFFE0000007FFF800FFFFFFF8000000FFF800FFFFFFFF0000003F
F800FFFFFFFFC0000007F800FFFFFFFFF0000001F800FFFFFFFFFE0000003800
FFFFFFFFFF8000000800FFFFFFFFFFE000000000FFFFFFFFFFF800000000FFFF
FFFFFFFF00000000FFFFFFFFFFFFC0000000FFFFFFFFFFFFF0000000FFFFFFFF
FFFFFE000000FFFFFFFFFFFFFF800000FFFFFFFFFFFFFFE00000FFFFFFFFFFFF
FFFC0000FFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFF
F000FFFFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFFFF80FFFFFFFFFFFFFFFFFFE0
>
} 0 get}
ID 
EI

} exec  restore } bind def
/a8  { save
 {
0 0 0 0 7 40 d1
7 0 0 40 0 0 cm

_op? setoverprint
BI
/Width 7
/Height 40
/BitsPerComponent 1
/Decode [0 1]
/ImageMask true
/DataSource {{<E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0
E0E0E0E0E0E0E0E0>
} 0 get}
ID 
EI

} exec  restore } bind def
currentdict end def
FontName currentdict end
definefont pop
[/A/N8 -1 TZ
0 0 595 842 RC
0.09999 0 0 0.09999 0 0 cm

q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
1319.25 5206.25 m
1319.25 5217.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 116.79899 509.66198 Tm
(0.0005)Tj 
ET
Q
Q
q
1167 5096 m
1167 5097 l
1168 5097 l
1168 5096 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 116.5 517.19999 Tm
(\000)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
1683.25 5206.25 m
1683.25 5217.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 153.17199 509.72299 Tm
(0.0007)Tj 
ET
Q
Q
q
1531 5097 m
1531 5098 l
1532 5098 l
1532 5097 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 152.89999 517.19999 Tm
(\000)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
2046.25 5206.25 m
2046.25 5217.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 189.54299 509.72299 Tm
(0.0009)Tj 
ET
Q
Q
q
1895 5097 m
1895 5098 l
1896 5098 l
1896 5097 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 189.19999 517.19999 Tm
(\000)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
2410.25 5206.25 m
2410.25 5217.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 225.91299 509.72299 Tm
(0.0011)Tj 
ET
Q
Q
q
2259 5097 m
2259 5098 l
2260 5098 l
2260 5097 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 225.59999 517.19999 Tm
(\000)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
2774.25 5206.25 m
2774.25 5217.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 262.28599 509.72299 Tm
(0.0013)Tj 
ET
Q
Q
q
2622 5097 m
2622 5098 l
2623 5098 l
2623 5097 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 262 517.19999 Tm
(\000)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
3138.25 5206.25 m
3138.25 5217.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 298.65699 509.66198 Tm
(0.0015)Tj 
ET
Q
Q
q
2986 5096 m
2986 5097 l
2987 5097 l
2987 5096 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 298.39999 517.19999 Tm
(\000)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
1283.25 5206.25 m
3174.25 5206.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 204.44699 495.22499 Tm
(sin)Tj 
/N6 7.81219 Tf
12.74868 4.81138 Td
(2)Tj 
/N6 10.99888 Tf
4.93739 -4.81138 Td
(2)Tj 
ET
Q
Q
q
2221 4952 m
2221 4953 l
2222 4953 l
2222 4952 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 221.79998 502.69999 Tm
(\001)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 227.89999 502.69999 Tm
(\002)Tj 
/N6 7.81219 Tf
1 0 0 1 232.44499 493.47599 Tm
(13)Tj 
ET
Q

2.49969 w
1 J
1 j
1283.25 5242.25 m
1294.25 5242.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 118.42199 521.66198 Tm
(2)Tj 
ET
Q
1283.25 5606.25 m
1294.25 5606.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 118.42199 558.03298 Tm
(3)Tj 
ET
Q
1283.25 5969.25 m
1294.25 5969.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 118.42199 594.40599 Tm
(4)Tj 
ET
Q
Q
q
1184 5944 m
1184 5945 l
1185 5945 l
1185 5944 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 118.09999 601.89999 Tm
(\003)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
1283.25 6333.25 m
1294.25 6333.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 118.42199 630.74499 Tm
(5)Tj 
ET
Q
Q
q
1184 6307 m
1184 6308 l
1185 6308 l
1185 6307 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 118.09999 638.19999 Tm
(\004)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
1283.25 6697.25 m
1294.25 6697.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 118.42199 667.14799 Tm
(6)Tj 
ET
Q
Q
q
1184 6671 m
1184 6672 l
1185 6672 l
1185 6671 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 118.09999 674.59999 Tm
(\005)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
1283.25 7061.25 m
1294.25 7061.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
1 0 0 1 118.42199 703.51998 Tm
(7)Tj 
ET
Q
Q
q
1184 7035 m
1184 7036 l
1185 7036 l
1185 7035 l
h
W n 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 118.09999 710.79998 Tm
(\006)Tj 
ET
Q
Q
q
1005 4867 m
1005 7172 l
3310 7172 l
3310 4867 l
h
W n 

2.49969 w
1 J
1 j
1283.25 5206.25 m
1283.25 7097.25 l
S 
q
10 0 0 10 0 0 cm

BT
/N8 1 Tf
0.09999 0 0 -0.09999 103.79998 583.89999 Tm
(\007)Tj 
/N6 10.99888 Tf
0 1 -1 0 111.61499 584.30899 Tm
(m)Tj 
/N6 7.81219 Tf
8.44107 -2.62564 Td
(21)Tj 
0 7.31217 Td
(2)Tj 
ET
Q
1134.25 6076.25 m
1131.25 6076.25 l
1131.25 6066.25 l
1130.89999 6063.90998 1129.05999 6061.33999 1126.25 6061.25 c
1048.25 6061.25 l
1045.71998 6061.33999 1043.89999 6063.82998 1044.25 6066.25 c
1044.25 6076.25 l
1041.25 6076.25 l
1041.25 6053.25 l
1134.25 6053.25 l
h
1116.25 6080.25 m
f* 
q
10 0 0 10 0 0 cm

BT
/N6 10.99888 Tf
0 1 -1 0 111.61499 607.93499 Tm
(10)Tj 
/N8 1 Tf
0.09999 0 0 -0.09999 104.39999 623.39999 Tm
(\b)Tj 
/N6 7.81219 Tf
0 1 -1 0 106.92799 623.93399 Tm
(5)Tj 
/N6 10.99888 Tf
7.68606 -4.68638 Td
(eV)Tj 
/N6 7.81219 Tf
12.81169 4.56141 Td
(2)Tj 
ET
Q
1134.25 6520.25 m
1041.25 6520.25 l
1041.25 6497.25 l
1044.25 6497.25 l
1044.25 6506.25 l
1043.89999 6509.35998 1045.63999 6512.29998 1048.25 6512.25 c
1126.25 6512.25 l
1129.20999 6512.29998 1130.89999 6509.62998 1131.25 6506.25 c
1131.25 6497.25 l
1134.25 6497.25 l
h
1116.25 6530.25 m
f* 
1283.25 7097.25 m
3174.25 7097.25 l
S 
3174.25 5206.25 m
3174.25 7097.25 l
S 
Q
q
1282 5205 m
1282 7098 l
3175 7098 l
3175 5205 l
h
W n 
0.85089 g

2137.25 5242.25 181.86999 1818.58999 rf
[9.99899 49.99499 ]0 d
4.99949 w
1 J
1 j
2919.25 5386.25 m
2938.25 5383.25 l
2956.25 5382.25 l
2974.25 5382.25 l
2992.25 5387.25 l
2993.25 5387.25 l
3010.25 5400.25 l
3022.25 5424.25 l
3022.25 5460.25 l
3012.25 5497.25 l
3010.25 5503.25 l
2997.25 5533.25 l
2992.25 5545.25 l
2979.25 5569.25 l
2974.25 5579.25 l
2958.25 5606.25 l
2956.25 5610.25 l
2938.25 5639.25 l
2935.25 5642.25 l
2919.25 5666.25 l
2911.25 5678.25 l
2901.25 5692.25 l
2885.25 5715.25 l
2883.25 5717.25 l
2865.25 5742.25 l
2858.25 5751.25 l
2847.25 5766.25 l
2829.25 5788.25 l
2828.25 5789.25 l
2810.25 5812.25 l
2800.25 5824.25 l
2792.25 5834.25 l
2774.25 5856.25 l
2770.25 5860.25 l
2756.25 5878.25 l
2739.25 5897.25 l
2737.25 5899.25 l
2719.25 5920.25 l
2708.25 5933.25 l
2701.25 5941.25 l
2683.25 5961.25 l
2676.25 5969.25 l
2665.25 5982.25 l
2647.25 6002.25 l
2643.25 6006.25 l
2628.25 6022.25 l
2610.25 6042.25 l
2610.25 6042.25 l
2592.25 6061.25 l
2576.25 6079.25 l
S 
[9.99899 49.99499 ]927.60798 d
2576.25 6079.25 m
2574.25 6081.25 l
2556.25 6100.25 l
2542.25 6115.25 l
2537.25 6120.25 l
2519.25 6139.25 l
2507.25 6151.25 l
2501.25 6158.25 l
2483.25 6176.25 l
2472.25 6188.25 l
2465.25 6195.25 l
2446.25 6214.25 l
2436.25 6224.25 l
2428.25 6232.25 l
2410.25 6251.25 l
2400.25 6260.25 l
2392.25 6269.25 l
2374.25 6287.25 l
2364.25 6297.25 l
2356.25 6305.25 l
2337.25 6323.25 l
2327.25 6333.25 l
2319.25 6341.25 l
2301.25 6359.25 l
2290.25 6370.25 l
2283.25 6377.25 l
2265.25 6394.25 l
2252.25 6406.25 l
2246.25 6412.25 l
2228.25 6429.25 l
2214.25 6442.25 l
2210.25 6446.25 l
2192.25 6464.25 l
2176.25 6479.25 l
2174.25 6481.25 l
2156.25 6498.25 l
2137.25 6515.25 l
2137.25 6515.25 l
2119.25 6532.25 l
2101.25 6548.25 l
2098.25 6551.25 l
2083.25 6565.25 l
2065.25 6581.25 l
2058.25 6588.25 l
2046.25 6598.25 l
2028.25 6614.25 l
2017.25 6624.25 l
2010.25 6630.25 l
1992.25 6646.25 l
1976.25 6660.25 l
1974.25 6662.25 l
S 
[9.99899 49.99499 ]1766.68998 d
1974.25 6662.25 m
1955.25 6678.25 l
1937.25 6694.25 l
1933.25 6697.25 l
1919.25 6709.25 l
1901.25 6724.25 l
1890.25 6733.25 l
1883.25 6739.25 l
1865.25 6754.25 l
1846.25 6769.25 l
1846.25 6770.25 l
1828.25 6783.25 l
1810.25 6798.25 l
1799.25 6806.25 l
1792.25 6812.25 l
1774.25 6825.25 l
1755.25 6838.25 l
1750.25 6842.25 l
1737.25 6851.25 l
1719.25 6863.25 l
1701.25 6875.25 l
1695.25 6879.25 l
1683.25 6886.25 l
1665.25 6897.25 l
1646.25 6906.25 l
1628.25 6914.25 l
1627.25 6915.25 l
1610.25 6921.25 l
1592.25 6925.25 l
1574.25 6926.25 l
1555.25 6918.25 l
1552.25 6915.25 l
1540.25 6879.25 l
1544.25 6842.25 l
1553.25 6806.25 l
1555.25 6797.25 l
1565.25 6770.25 l
1574.25 6747.25 l
1580.25 6733.25 l
1592.25 6706.25 l
1596.25 6697.25 l
1610.25 6668.25 l
1614.25 6660.25 l
1628.25 6633.25 l
1633.25 6624.25 l
1646.25 6600.25 l
1653.25 6588.25 l
1665.25 6568.25 l
1675.25 6551.25 l
1683.25 6538.25 l
1697.25 6515.25 l
S 
[9.99899 49.99499 ]2713.59999 d
1697.25 6515.25 m
1701.25 6508.25 l
1719.25 6480.25 l
1720.25 6479.25 l
1737.25 6452.25 l
1744.25 6442.25 l
1755.25 6424.25 l
1768.25 6406.25 l
1774.25 6398.25 l
1792.25 6372.25 l
1794.25 6370.25 l
1810.25 6347.25 l
1820.25 6333.25 l
1828.25 6322.25 l
1846.25 6297.25 l
1847.25 6297.25 l
1865.25 6273.25 l
1874.25 6260.25 l
1883.25 6250.25 l
1901.25 6226.25 l
1903.25 6224.25 l
1919.25 6204.25 l
1932.25 6188.25 l
1937.25 6181.25 l
1955.25 6159.25 l
1962.25 6151.25 l
1974.25 6137.25 l
1992.25 6116.25 l
1993.25 6115.25 l
2010.25 6095.25 l
2024.25 6079.25 l
2028.25 6074.25 l
2046.25 6053.25 l
2057.25 6042.25 l
2065.25 6033.25 l
2083.25 6013.25 l
2090.25 6006.25 l
2101.25 5994.25 l
2119.25 5974.25 l
2124.25 5969.25 l
2137.25 5955.25 l
2156.25 5936.25 l
2159.25 5933.25 l
2174.25 5918.25 l
2192.25 5899.25 l
2195.25 5897.25 l
2210.25 5881.25 l
2228.25 5863.25 l
2232.25 5860.25 l
2246.25 5846.25 l
2265.25 5828.25 l
S 
[9.99899 49.99499 ]3606.90998 d
2265.25 5828.25 m
2269.25 5824.25 l
2283.25 5811.25 l
2301.25 5794.25 l
2309.25 5788.25 l
2319.25 5778.25 l
2337.25 5761.25 l
2349.25 5751.25 l
2356.25 5745.25 l
2374.25 5729.25 l
2390.25 5715.25 l
2392.25 5714.25 l
2410.25 5698.25 l
2428.25 5683.25 l
2434.25 5678.25 l
2446.25 5668.25 l
2465.25 5653.25 l
2478.25 5642.25 l
2483.25 5639.25 l
2501.25 5624.25 l
2519.25 5610.25 l
2525.25 5606.25 l
2537.25 5597.25 l
2556.25 5583.25 l
2574.25 5570.25 l
2574.25 5569.25 l
2592.25 5557.25 l
2610.25 5544.25 l
2626.25 5533.25 l
2628.25 5532.25 l
2647.25 5519.25 l
2665.25 5508.25 l
2682.25 5497.25 l
2683.25 5496.25 l
2701.25 5485.25 l
2719.25 5474.25 l
2737.25 5464.25 l
2743.25 5460.25 l
2756.25 5453.25 l
2774.25 5444.25 l
2792.25 5434.25 l
2810.25 5426.25 l
2814.25 5424.25 l
2828.25 5417.25 l
2847.25 5410.25 l
2865.25 5403.25 l
2883.25 5396.25 l
2901.25 5391.25 l
2914.25 5387.25 l
2919.25 5386.25 l
S 
[49.99499 49.99499 19.99798 49.99499 ]0 d
2683.25 5641.25 m
2701.25 5638.25 l
2719.25 5638.25 l
2730.25 5642.25 l
2737.25 5647.25 l
2748.25 5678.25 l
2740.25 5715.25 l
2737.25 5721.25 l
2724.25 5751.25 l
2719.25 5763.25 l
2705.25 5788.25 l
2701.25 5794.25 l
2683.25 5823.25 l
2682.25 5824.25 l
2665.25 5850.25 l
2657.25 5860.25 l
2647.25 5876.25 l
2631.25 5897.25 l
2628.25 5900.25 l
2610.25 5924.25 l
2603.25 5933.25 l
2592.25 5947.25 l
2574.25 5969.25 l
2573.25 5969.25 l
2556.25 5991.25 l
2543.25 6006.25 l
2537.25 6013.25 l
2519.25 6034.25 l
2512.25 6042.25 l
2501.25 6055.25 l
2483.25 6075.25 l
2480.25 6079.25 l
2465.25 6095.25 l
2447.25 6115.25 l
2446.25 6115.25 l
2428.25 6135.25 l
2413.25 6151.25 l
2410.25 6154.25 l
2392.25 6173.25 l
2378.25 6188.25 l
2374.25 6192.25 l
2356.25 6211.25 l
2343.25 6224.25 l
2337.25 6230.25 l
2319.25 6248.25 l
2307.25 6260.25 l
2301.25 6266.25 l
2283.25 6285.25 l
2270.25 6297.25 l
2265.25 6302.25 l
S 
[49.99499 49.99499 19.99798 49.99499 ]886.73098 d
2265.25 6302.25 m
2246.25 6320.25 l
2233.25 6333.25 l
2228.25 6337.25 l
2210.25 6355.25 l
2194.25 6370.25 l
2192.25 6372.25 l
2174.25 6389.25 l
2156.25 6406.25 l
2155.25 6406.25 l
2137.25 6422.25 l
2119.25 6439.25 l
2115.25 6442.25 l
2101.25 6455.25 l
2083.25 6471.25 l
2074.25 6479.25 l
2065.25 6487.25 l
2046.25 6502.25 l
2031.25 6515.25 l
2028.25 6517.25 l
2010.25 6532.25 l
1992.25 6547.25 l
1986.25 6551.25 l
1974.25 6561.25 l
1955.25 6575.25 l
1939.25 6588.25 l
1937.25 6589.25 l
1919.25 6602.25 l
1901.25 6615.25 l
1886.25 6624.25 l
1883.25 6626.25 l
1865.25 6637.25 l
1846.25 6648.25 l
1828.25 6656.25 l
1819.25 6660.25 l
1810.25 6663.25 l
1792.25 6667.25 l
1774.25 6666.25 l
1766.25 6660.25 l
1757.25 6624.25 l
1765.25 6588.25 l
1774.25 6563.25 l
1778.25 6551.25 l
1792.25 6519.25 l
1795.25 6515.25 l
1810.25 6486.25 l
1814.25 6479.25 l
1828.25 6454.25 l
1835.25 6442.25 l
1846.25 6424.25 l
1858.25 6406.25 l
S 
[49.99499 49.99499 19.99798 49.99499 ]1796.43998 d
1858.25 6406.25 m
1865.25 6395.25 l
1882.25 6370.25 l
1883.25 6368.25 l
1901.25 6342.25 l
1907.25 6333.25 l
1919.25 6316.25 l
1933.25 6297.25 l
1937.25 6291.25 l
1955.25 6267.25 l
1961.25 6260.25 l
1974.25 6244.25 l
1989.25 6224.25 l
1992.25 6221.25 l
2010.25 6198.25 l
2019.25 6188.25 l
2028.25 6176.25 l
2046.25 6155.25 l
2049.25 6151.25 l
2065.25 6133.25 l
2081.25 6115.25 l
2083.25 6113.25 l
2101.25 6092.25 l
2114.25 6079.25 l
2119.25 6073.25 l
2137.25 6053.25 l
2148.25 6042.25 l
2156.25 6034.25 l
2174.25 6015.25 l
2183.25 6006.25 l
2192.25 5997.25 l
2210.25 5978.25 l
2219.25 5969.25 l
2228.25 5961.25 l
2246.25 5943.25 l
2257.25 5933.25 l
2265.25 5926.25 l
2283.25 5909.25 l
2296.25 5897.25 l
2301.25 5893.25 l
2319.25 5876.25 l
2337.25 5861.25 l
2338.25 5860.25 l
2356.25 5845.25 l
2374.25 5830.25 l
2381.25 5824.25 l
2392.25 5815.25 l
2410.25 5800.25 l
2426.25 5788.25 l
2428.25 5786.25 l
2446.25 5772.25 l
S 
[49.99499 49.99499 19.99798 49.99499 ]2665.21998 d
2446.25 5772.25 m
2465.25 5759.25 l
2475.25 5751.25 l
2483.25 5746.25 l
2501.25 5733.25 l
2519.25 5721.25 l
2529.25 5715.25 l
2537.25 5709.25 l
2556.25 5698.25 l
2574.25 5687.25 l
2590.25 5678.25 l
2592.25 5678.25 l
2610.25 5668.25 l
2628.25 5659.25 l
2647.25 5652.25 l
2665.25 5645.25 l
2676.25 5642.25 l
2683.25 5641.25 l
S 
[]0 d
2465.25 5894.25 m
2475.25 5897.25 l
2479.25 5933.25 l
2465.25 5963.25 l
2461.25 5969.25 l
2446.25 5994.25 l
2438.25 6006.25 l
2428.25 6024.25 l
2412.25 6042.25 l
2410.25 6045.25 l
2392.25 6071.25 l
2383.25 6079.25 l
2374.25 6091.25 l
2356.25 6113.25 l
2352.25 6115.25 l
2337.25 6133.25 l
2320.25 6151.25 l
2319.25 6152.25 l
2301.25 6173.25 l
2286.25 6188.25 l
2283.25 6191.25 l
2265.25 6210.25 l
2250.25 6224.25 l
2246.25 6227.25 l
2228.25 6246.25 l
2212.25 6260.25 l
2210.25 6262.25 l
2192.25 6280.25 l
2174.25 6296.25 l
2172.25 6297.25 l
2156.25 6312.25 l
2137.25 6328.25 l
2130.25 6333.25 l
2119.25 6342.25 l
2101.25 6357.25 l
2083.25 6369.25 l
2082.25 6370.25 l
2065.25 6383.25 l
2046.25 6398.25 l
2028.25 6402.25 l
2017.25 6406.25 l
2010.25 6409.25 l
1992.25 6406.25 l
1992.25 6406.25 l
1990.25 6370.25 l
1992.25 6365.25 l
2006.25 6333.25 l
2010.25 6326.25 l
2027.25 6297.25 l
2028.25 6295.25 l
S 
[]865.09899 d
2028.25 6295.25 m
2046.25 6268.25 l
2051.25 6260.25 l
2065.25 6240.25 l
2078.25 6224.25 l
2083.25 6218.25 l
2101.25 6193.25 l
2107.25 6188.25 l
2119.25 6172.25 l
2137.25 6152.25 l
2138.25 6151.25 l
2156.25 6131.25 l
2171.25 6115.25 l
2174.25 6112.25 l
2192.25 6092.25 l
2206.25 6079.25 l
2210.25 6074.25 l
2228.25 6056.25 l
2243.25 6042.25 l
2246.25 6039.25 l
2265.25 6022.25 l
2283.25 6006.25 l
2283.25 6006.25 l
2301.25 5990.25 l
2319.25 5975.25 l
2327.25 5969.25 l
2337.25 5961.25 l
2356.25 5947.25 l
2374.25 5934.25 l
2377.25 5933.25 l
2392.25 5923.25 l
2410.25 5910.25 l
2428.25 5904.25 l
2446.25 5897.25 l
2448.25 5897.25 l
2465.25 5894.25 l
S 
[]0 d
1985.25 5242.25 m
1985.25 7061.25 l
S 
2485.25 5242.25 m
2485.25 7061.25 l
S 
2228.25 5242.25 m
1985.25 5242.25 l
S 
0 g
2033.25 5230.25 m
1985.25 5242.25 l
2033.25 5254.25 l
f 
0.64402 w
2033.25 5230.25 m
1985.25 5242.25 l
2033.25 5254.25 l
2033.25 5230.25 l
S 
4.99949 w
2228.25 5242.25 m
2485.25 5242.25 l
S 
2433.25 5255.25 m
2485.25 5242.25 l
2433.25 5229.25 l
f 
0.67767 w
2433.25 5255.25 m
2485.25 5242.25 l
2433.25 5229.25 l
2433.25 5255.25 l
S 
4.99949 w
1319.25 6151.25 m
3119.25 6151.25 l
S 
2319.25 5278.25 m
2137.25 5278.25 l
S 
2174.25 5269.25 m
2137.25 5278.25 l
2174.25 5287.25 l
f 
0.48062 w
2174.25 5269.25 m
2137.25 5278.25 l
2174.25 5287.25 l
2174.25 5269.25 l
S 
4.99949 w
2137.25 5278.25 m
2319.25 5278.25 l
S 
2283.25 5287.25 m
2319.25 5278.25 l
2283.25 5269.25 l
f 
0.48062 w
2283.25 5287.25 m
2319.25 5278.25 l
2283.25 5269.25 l
2283.25 5287.25 l
S 
Q
q
85 0 m
85 7920 l
5950 7920 l
5950 0 l
h
W n 

4.99949 w
2 J
25.25 7923.25 m
-374.75 7923.25 l
85.25 7983.25 m
85.25 8383.25 l
6120.25 7923.25 m
6520.25 7923.25 l
6060.25 7983.25 m
6060.25 8383.25 l
25.25 -499.75 m
-374.75 -499.75 l
85.25 -559.75 m
85.25 -959.75 l
6120.25 -499.75 m
6520.25 -499.75 l
6060.25 -559.75 m
6060.25 -959.75 l
S 
Q
PDFVars/TermAll get exec end end
userdict /pgsave get restore
showpage
%%DocumentNeededResources:
%%+ font Times-Roman
%%DocumentSuppliedResources:
%%+ font A
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%+ procset (Adobe Acrobat - general image support) 1.2 0
%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF
