%!PS-Adobe-3.1 EPSF-3.0
%%Title: beta_sketch.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: osservat
%%CreationDate: 10/8/2004
%%BoundingBox: 0 0 618 393
%%HiResBoundingBox: 0 0 617.3350 392.3301
%%CropBox: 0 0 617.3350 392.3301
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.11 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 35 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width string def
		1 1 Height
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 206 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 3 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
				}{
					AGMCORE_cur_err 0 0
				}ifelse
				compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			AGMCORE_host_sep
			{ 
				gsave
				1 0 0 0 setcmykcolor currentgray 1 exch sub
				0 1 0 0 setcmykcolor currentgray 1 exch sub
				0 0 1 0 setcmykcolor currentgray 1 exch sub
				0 0 0 1 setcmykcolor currentgray 1 exch sub
				add add add 0 eq
				{
					pop false
				}{
					false setoverprint
					1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
					currentgray 0 eq
				}ifelse
				grestore
			}{
				AGMCORE_distilling
				{
					pop
					AGM_is_distiller_preserving_spotimages not
				}{
					Adobe_AGM_Core/AGMCORE_name xddf
					false
					currentpagedevice/OverrideSeparations known
						{
						currentpagedevice/OverrideSeparations get
							{
							/HqnSpots /ProcSet resourcestatus
								{
								pop pop pop true
								}if
							}if
						}if					
						{
						AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
						gsave
						[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
						false
						currentpagedevice/SeparationColorNames 2 copy known
						{
							get
							{
							AGMCORE_name eq or
							}forall
						not
						}{
							pop pop
						}ifelse
						grestore
						}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						aload pop 3 -1 roll
						AGMCORE_ReplaceMappedColor
						3 1 roll 4 array astore
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md /pmSVsetup{} put
		md /endp{}put
		md /pse{}put
		md /psb{}put
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if 
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.11 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.11 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/doc_setup{Adobe_CoolType_Core begin/mov
/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt
/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh
/awidthshow load def/wsh/widthshow load def/ash/ashow load def/sh/show load
def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC
0 def/charcode 2 string def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end findfont $SubstituteFont begin
/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly
known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{
exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}
forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin
/$substituteFound false def/$fontname 4 index def/$doSmartSub false def end 3
index findfont $SubstituteFont begin $substituteFound{false}{dup/FontName
known{dup/FontName get $fontname eq 1 index/DistillerFauxFont known not and
/currentdistillerparams where{pop false 2 index isWidthsOnlyFont not and}if}{
false}ifelse}ifelse exch pop/$doSmartSub true def end{exch pop exch pop exch 2
dict dup/Found 3 index put exch findfont exch}{exch exec exch findfont 2 dict
dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont
definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index
type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index findfont dup
/Widths known{Adobe_CoolType_Data/AddWidths? true put gsave dup 1000 scalefont
setfont}if/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data
/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop
}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv
{currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont
dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}ifelse def
/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$substituteFound false def/$doSmartSub
true def/$depth 0 def/$fontname null def/$italicangle 26.5 def/$dstack null
def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false
setglobal 11 dict begin/UseFont exch $WMode 0 ne{dup length dict copy dup
/WMode $WMode put/UseFont exch definefont}if def/FontName $fontname dup type
/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def
/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]
def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch
begin CCInfo begin 1 string dup 0 3 index put exch pop/cc exch def UseFont
1000 scalefont setfont cc stringwidth/y exch def/x exch def x y setcharwidth
$SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y
moveto end end}bind def currentdict end exch setglobal}bind def/$GetaTint 2
dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch
def $fontname exch dup/FontName known{dup/FontName get dup type/stringtype eq{
cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn
exch put dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}
bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120
translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
setcolorspace}{0 setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120
sub x 10 div exch moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto
closepath gsave Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}
forall pop grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{
currentglobal exch dup gcheck setglobal null copyfont begin/FontBasedOn
currentdict/FontName known{FontName dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse def/FontName $fontname dup type/stringtype eq{cvn}if def
/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{
FontInfo null copyfont}{2 dict}ifelse dup begin/ItalicAngle $italicangle def
/FontMatrix FontMatrix[1 0 ItalicAngle dup sin exch cos div 1 0 0]matrix
concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end
definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}
bind def end def end def/$Oblique SetSubstituteStrategy/$findfontByEnum{dup
type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup
length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)
putinterval exch 7 exch putinterval/$match false def $SubstituteFont/$dstack
countdictstack array dictstack put mark{$fontpat 0 $slen 7 add getinterval{
/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict
true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin
false}ifelse}forall pop}if cleartomark/$slen 0 def $match false ne{$match
(fonts/)anchorsearch pop pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup
begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3
/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[
/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def
/CNS1[/MKai-Medium/MHei-Medium]def end def end def/$cmapname null def
/$deepcopyfont{dup/FontType get 0 eq{1 dict dup/FontName/copied put copyfont
begin/FDepVector FDepVector copyarray 0 1 2 index length 1 sub{2 copy get
$deepcopyfont dup/FontName/copied put/copied exch definefont 3 copy put pop
pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind
def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index
$cmapname $fontpat cvs putinterval $cmapname length add $str exch 0 exch
getinterval cvn}bind def/$findfontByROS{/$fontname exch def $ROS Registry 2
copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse
false exch{dup/CIDFont resourcestatus{pop pop save 1 index/CIDFont
findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop
exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs
$buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly
known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get dup/Registry
get Registry eq exch/Ordering get Ordering eq and and{exch restore exch pop
true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{
$fontname $findfontByEnum}ifelse}ifelse}bind def end end currentdict/$error
known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}
if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category
resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup
length $slen gt $sname null ne or $slen 0 gt and{$sname null eq{dup $str cvs
dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap
resourcestatus{pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo
get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1
roll pop{dup cvi}stopped{pop pop pop pop pop $findfontByEnum}{4 2 roll pop pop
exch length exch 2 index length 2 index sub exch 1 sub -1 0{$str cvs dup
length 4 index 0 4 index 4 3 roll add getinterval exch 1 index exch 3 index
exch putinterval dup/CMap resourcestatus{pop pop 4 1 roll pop pop pop dup
/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall
$findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop
$findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop
$findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0 def end}}{
{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname
null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse end}}
ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont load
put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName known{
dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2
index def/$origfontname 4 index def/$substituteFound true def}if exch pop{
$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup
$findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop
}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName
get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentdict ignoreimagedata
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: beta_sketch.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -392.33 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 392.33 li
617.335 392.33 li
617.335 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
116.433 253.179 mo
116.433 273.425 li
130.429 273.425 li
130.429 253.179 li
116.433 253.179 li
false sop
1 1 1 rgb
ef
2 lw
1 lc
0 lj
8 ml
[] 0 dsh
true sadj
118.434 253.847 mo
118.434 274.093 li
132.43 274.093 li
132.43 253.847 li
118.434 253.847 li
cp
1 0 0 rgb
s
120.416 337.327 mo
114.417 337.327 109.519 342.429 109.519 348.726 cv
109.519 355.022 114.417 360.073 120.416 360.073 cv
126.414 360.073 131.263 355.022 131.263 348.726 cv
131.263 342.429 126.414 337.327 120.416 337.327 cv
1 1 1 rgb
ef
2.2495 lw
1 lj
10 ml
120.416 337.327 mo
114.417 337.327 109.519 342.429 109.519 348.726 cv
109.519 355.022 114.417 360.073 120.416 360.073 cv
126.414 360.073 131.263 355.022 131.263 348.726 cv
131.263 342.429 126.414 337.327 120.416 337.327 cv
0 0 0 rgb
s
120.416 337.327 mo
114.417 337.327 109.519 342.429 109.519 348.726 cv
109.519 355.022 114.417 360.073 120.416 360.073 cv
126.414 360.073 131.263 355.022 131.263 348.726 cv
131.263 342.429 126.414 337.327 120.416 337.327 cv
1 1 1 rgb
ef
120.416 337.327 mo
114.417 337.327 109.519 342.429 109.519 348.726 cv
109.519 355.022 114.417 360.073 120.416 360.073 cv
126.414 360.073 131.263 355.022 131.263 348.726 cv
131.263 342.429 126.414 337.327 120.416 337.327 cv
.980392 0 0 rgb
s
1 lw
0 lc
124.417 325.583 mo
120.266 338.577 li
.980392 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
11 dict begin
/FontName /TimesNewRomanPSMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/space 
<10bf317079c757bf91> ND 
/ampersand 
<10bf3170422ed356d205d54bdb6f9a27f876311f0e616c090e51f642a401
99d741472f135139cb2a05da5fef60106675eddd051452d6a00460ede1cb
23b05d18d5bd8f0b29e5254f286db808c7cd1af438f536c8d71d5363dde3
20000f4aa24bdf5859f315ace4bf97812a73a669dabd4ce197eff26f0ab7
50173ae0bb82e9cdbf509e1d709053a847f6dae19dc374a59f44bb1f624d
bf1b677a5d84a451a215c9b09e1818f3d24ce9cabebd323abfbb425637fd
004a70266dcf4f87173a23c3f77876130e0c51e200b17cece700b8e6ffc0
8967c0e48d95446417725d9b9bf0549e669d6406c62aff3956625d7690b3
75cd66e92540e98beab91648151bcdd2a0548a452352c7e422dc5f5d29f2
95665a24a3957740401bce18bc1c6fa7a78957a61b8a08603ade4dbec692
c77b33ca980bb662ee889fc6873f40c6fc08e5dbc00b28b1185afa24cd32
c85f0d7a9ecf1432289a10b3a92a4ee2bdc932d5> ND 
/zero 
<10bf31705d64a97b20dbc4561ea81104c96d02e040b796018bde0586bcad
95676b124522d0c27422b5dfa0bc2ccb1721be737b8e218982a6c51bb309
d221437a412ad70c8e013d67f1a65a7fdb26ab4d68559ae94edf62d226ee
2788d9a25e35d76a982a9ce00f945b2003db52c99e6508ea9ec1d594cacc
c5569596c150879d227c7852387d8a43228bbbf5b713924c938436dc78fa
d90a58c4b5cad2f69e6ba85a2be55b7f> ND 
/five 
<10bf317049845615ceab2cb35844ace30baf3e54b0e1773fc25e2037b21b
b58b95d34cefc92bea69dc9b438084ed7eb5c6702a368454ebc82a5856ce
9936aede12d64deba22dd59cd070d9cd700c552563a2157176094ad577ca
7175d4c555582970bb6ced51f021b279f79ea313c4e45258856c7401f914
3fd613f871ff33cdce06d0175d18b29427c1e70009e3e10e63caa0676029
8c0b976669b8d245> ND 
/six 
<10bf3170448bf7f9a4e5f8472a5a2d45b7594de91351c6ec052ffd8b762a
bed41ed16809fa2365105c6627f46205709a8a1309c7141139fd941188bd
c8d9b0b55c47d641558ff36ded37dddb1b216d36df7ff3e4cecb5e93a247
22d0b6b5e65a4a2dcc56b02d7259d8fd5b7ec0999a61dac27e80da2f8676
34759b4e247227f13713c39238726a89a708bbed3b752173bdebcebaeea7
71ee266a3e95119dcfb78b31c6beeef7041756c5788d9d3d80a0bb3f669d
9ba6d8b1667d5d5aa89f4142cfd220ffe9eb070e> ND 
/eight 
<10bf31703a9bd69293aaf1980d4004db29512cfbcdf83050f262f22394b0
ef479114fcd1ed3780f8e8379ec274149787838cb972946ff925f327dc43
fe0a268771c55ebbfb2b11062f0229b6b8245dcdaee1f4d128ae888b5b31
2979a0a0311f4e185869859bc2f66d09f1f0a58e4c124d00e52b1afc6fde
a6cc391f21431f05bfb725982450ba002876f8730b821ec63f425acc7fbc
dbd469c4bbc842a4c448a96aef6e173e7ebf5f5a7a17953e1579490627e0
98ff8ddd57718c580a5c4db5f0f85a39de87a2ee8507278f64c74b506e5f
c484dc38505671de2149f16a16f5b3bd2bd178fe57f2540526157d2501cd
a1ec9d05b086c77bbf39961b> ND 
/equal 
<10bf31706fd84e5f213246ce12afb09aaf5d6fc92b7b479a7625eccb0931
bf62979b6a20ad> ND 
/A 
<10bf3170612fa8ae288a2f767c6f2d22480749f87ffaef88db9508f355b3
d621b9e09a8d1290afe57d05190debf7b19b92f6309b70e08d2409abdf50
3b6a0e5daa0043a6e298cadec0a7dbd5588f8ba0646e339db53e322e33db
33e9ac93d421016e880386d59c5f84e2c9dcb201c618c0d88390bc39b5b5
dcf9b13cb5b08470f0d83c168f6d7ea2244d1b> ND 
/B 
<10bf31706ea8189a0122a2c3dc80451ea987f9cc6dc7afa0c8f0365e6d8e
59a275ca593c5d46c9efa9ebe4192f8e472ac6f0efdf90f5d264a8b47fa4
3bcd031546c0586a98250a46abdef7d038322a132dd14df107aae195c311
99c6fa7558e3ee2379999d05cf38ad7f22726f37f2f0654cf65c11005a88
2feb945df6452201e1abb666d0244ac9dc622994ec7112e71f49ba0b5306
4d49384d5d74864da9fc7636c8b9964886a4103e2320a1f33cb3f7f7bcc7
104eb429cfd6cfab753b2e30fdbce693ce1dcc5a7fe31d75680753c52fe9
350712be59c0ee4a2780b638de9e8e44870622e76d3c23cdfd281b0b8177
c0aff3531220d18c12c91634c02401e01a11> ND 
/C 
<10bf31705d65c09013f5e74d02fbfce579927dc4371245d5279a0be7ec2d
bd3b1448f6fd9c53426e6238d321f77957395a071b4b8eae65710650ca99
5020550eaa4528d828ef4c47ac3d29b589dd7f1c7cfe44b10e3e8fa63e50
7c3e4eb74e257f81314f58ef9126142bc9d3a940c619a0d5450ffb6600e9
bb7f776713c2df8dd431070f31717d2477542aecd1539231d249a65da0e1
ee77958319b99e72488e0e9fa74f4d170e269189eb39aa1a> ND 
/D 
<10bf31706ea8518093a448f0413d9dd2503cf14562d62f8e03c59ef262c0
e81d3c5037d7a8fbf15657e5bea1080fe305ab71bf0048720c010cf41197
6f2c354776e6ac045fcbc3395f65891cbe4c7f0093e58d10b57eae23372e
4cc99d7f2f11c1f1c023288641813a3b8b65e70e4b5173920a628da83be4
7b524c38228036fccc15a820529e8626ae48a60adbbae5fd> ND 
/E 
<10bf31705245888107d641c65df0d045384b4474a865698169ff2c4c5759
f26e2217c59fcbe377198e20e38aaa44f075831908ff3584c8503712a3f9
da462024eae3426d516a8864b3756edb7e42923b77324ddcf4879e1b61b4
02502bf9f5c08a938a8b9111b299fb506f1aa6115b23bb6038633ef2c172
1c1c4fba6b5b7baae1d192358092d890074dc21b1d5f65994b78807f042e
8945e17dc9fd4baebebbadfc790575a38910eab682188d9cdb44060faa47
1dcf91df296595839280be99912fd6d9ac4594d1b8a3> ND 
/G 
<10bf31705c375b3d52bd2a5cd70fbc704e42e2d082b763b9fa2c611bd3aa
40be6e6ecf21320b86fa94da56792a23cd4e78b37859f7acfb46107c23b8
d678593efff6f2b1a7374548e4968d3cfb768476831a5fa96b59946b8d35
1482a66fbdae83d3c9d236914bbd03b76af7e1548f4004bd179430469480
a069c8c3b018a68da412635faedb90f745b9b2dc3308e5a29974468d3344
436e5e923d61950d32f3fb15594a417f607592fb48cc8b3827ec5dd7347b
46307478d5408f4ce5c34c6227c899e9b3dc9f00e9d47c61bd6f058872b2
265fb36733a20c4a4a01d0> ND 
/I 
<10bf31705600a7ed90307a9003ca62013c6a672423969cbfb09d38b977c3
3bb76a0a443b03ca15feffb7f47ead3efae89c4da09011014b3ef74dfcc4
49aa62038fec2b8087c3eb93eadcca82adeba753d37fb428848495514418
28d8a0f3ad99e43ca7d439d4d98a470d6617f8dd1388> ND 
/L 
<10bf31706d7ba414cb278d86ccf8028d3dbbadce953c477ec6fd892cdd09
28b47464cdb0aff88491ce732d9c10732adab5aca1a48b24486aeab6e776
8d3f8a7557500e8ad2d7563790919272c92abe6932db67709b8be481fa2d
23f34f8a2142f5ade46e9f8e951b9e69f9979f92c2712747285f1cd50a35
4a817e3933293b845a2c1e14ed04ed77> ND 
/N 
<10bf31708c7b609303394ff7e7beb1f1e2d912c0050722dbb269837c8070
85159ebfbcb850e48463d8f358084aeded97142804f1f51ff75d16b17a5d
646a3837e3ebdfafd6182c21d8cdafc98e9d8cbc0b466167cceccb3d123f
62398962a519f2323011d0b183f9ad60fd7a288173be28cd9c4597796a7c
d28ca04ea047fbcb8cf977be0c4bcf07ced5e27f53> ND 
/P 
<10bf31706ea9c5bc0db16a9d0fb9334b7aae45fa9562423ca0efcafbe577
696190382686f72544b1109cd9a28e6e2fb8c3e703e277558d9de53e9bd4
331eb7411fa27fc9fbf9488ff1a8e626acd2f355101bb86e40f636dd5a74
50c4f3ac4c3fce01d454db469da536ea46528530bc3e44fdc91176a1e591
1b2932205e6c0eac6f4d330f0230a163b5b30ecdc649a4ff6b024a9513ec
d5f934e2e3b5d7f24bd0170221950b8bb0ffa0c50e77c36e34adf2e847c9
adbff54bf77ef65d9afdb3878865> ND 
/R 
<10bf31706ea8189a009d73e5e146d6ad0177c901efe5ef75bac2234531d1
4e7e0aaec23cde257fea6183bb59ac0c8f7c4c031763bbd5184cef999ee8
edde89dd69ac22f43ddc48b9c2b2bb41da94de9b87bf19f326cce2b9f8cb
b7a075d50d736a3e4d66153a18a1c6cac7eabfc5539a484e21b69d8de53a
4d23454b314f3d1277773c64ef53d1bdd83d117997629b1158397a845cf1
8a05f6ca00e60a33791fe9dc1826e605ac6a33b2ab313c0caa91fd251636
485ca539d72e4fe5643a907420882577609e37de84532359e31f75d60f50
b02788e4770d964254cfbeb4fb> ND 
/S 
<10bf3170383eecc69ba25cd9f9f1a3f877f72d54ca249226fb09a99225d4
fa4a892ae0bf757b41a46aaf766816bb2e9c6c4e867aeb02a76d05e762b6
353837bdf52bbc0c70c14510f08ced31ac95e2c8b5dfdbf8f1dffd4709a0
760737961b7464d75e4dbf7323db187fa23f8213fd84f092b3c292e45093
4a017d49f1fa4f8d834c3fd0c5126c0c5c896c1a48c0653753c6f56c23b6
627010a4379bd3d96b26db0b3531098cdc23704e1f8e25a61651df0d8d02
8f68c8b7a7de4652566ef5c50305a3ec674a5be2d1bf9f76580a00788d85
ad3f4dc24f5adec7880bc3a7db38c71260e951f8778b0aff0ff2e97effe6
f0b2b33485e5f0401138cd3f9e066ed25ff05e7594ebdb0029f3d5> ND 
/T 
<10bf31705b0718f462bb36d02a655e51f04593b972dbe0892a4279b53c95
62dbd237266bc0cb4e5967f6d053e97e3cc8fe6477448edcd2c2ed40f6e6
056ef32aac1986bf84927c9fb1e2806a71f53c8604421852f835782fd7d8
0fdb45127c08fbe24f16e5af9ede981de72f75b4f62ef25f8b6075081fcf
> ND 
/Y 
<10bf3170662739732759e31a33a2b858ac8cce35fcfa8b0fd6b101b1337c
eaa4fd69224740144b433cf972bf0c225d34380ffe63ffc9039c9c0899da
43713e2fa2e8096de83d9eb6c845f80c506b743f7df3fec42b298fd74cb0
0691546d7fc43db5b278ea906a981eb2ef70e4b072692c1f1c3b1cd76235
f7c45bcd5f1ce939a048c7198db71b56f5842ae2d2efe815de0be7393924
485a953a8f1f6258415c5ee70d72d6a5833d55c0cdd424060f02ed4bdfbc
2b154233d6ab9344af> ND 
/a 
<10bf31705d647142d5ee6b7c4c12c41164f05a89990635873917bf00c5a2
b1b299b84b64fad030fdefe54a736fd84981f1bdecf34c327a4087285dd7
ff9a128a9fff4f1e5e34e2c477e4543546f0e505eb84b8e6141c12199331
8a7bef58caa55697aff5d8bf4fe61eb63478ae931b5c51fe7be8aa76cee5
cf639a1d462398300117c6a9c09614a29dfc50b3c7ddbacc1c6e2f7accb0
35d51bb776dfa4f2180b5bfa695d4ee30d466764f5192b628fd7c4971313
cd38d55ff99cfe805727052d975c4756402eb9230dd87b777a603efe9c10
65e950375d54aa41ed1c701bfac764ae78b65834b8918a99ed1f017d5313
eb0950b1f45353f40dc633104ecc941e4bbbf8359d5ae9042ef0f4edfdb8
> ND 
/c 
<10bf31705fc10320935f517e088588bc677b6f6b1116d76a45fb5fc081aa
57ad08a2f19e4ebd5e7f2e40678b64d780ab49e945b6f1fcf8c1bf2edd40
201d9d025abf1aec5b1b3268a3f2a9365f1c6e4133cdb11264503de1434e
2553cdd7a1785e8aefca6abe49ef29279001bfee84321f1c29e0a5b47534
7f9b91833b42fbc209dedbbca6bb8dac3b6f01ececb32ee525fd2275d1f3
f94c46a2dc92d591> ND 
/e 
<10bf3170422f4b41885a9676842055648b7ac91c5a5b75b50afc4ad63a16
3403789c9c8ba615f8e38a9fce64aceadaad23d4e3dbfa43e075f8b5608d
92b54d863453827f92409bc9183300c8f2b193237fd39a67d028e7efccd3
224f7d467520735ecf6bf2ce731119ee6085c9e4a87b9d8af5aaaf671a24
b9d9d852fe88b0aa1a2fe53bd12da555ee08ba1ef1ee246f54193c816b> ND 
/g 
<10bf31705b0767a01e9193e4d997e718ba6351677893b73d138e3fe6ba14
fc659a3bcdee55e0cfe8324eeac72638d3bd305a7a0220257ff3808a1470
04dc5c3c9fcb344358fed8b5ae71f4f49bb62f7c38ae95fdb022e2f50d0f
f7edd042065f7148993d640d50d67f360ac97639f25c381784672dcecf1d
1627665bc46b98264545bb45b967dbd7f6dce2f63c1e6751d9e493efd546
e255705157ddc690cb167218c88d537fe6a759d15d23d8bf19975778954b
513e4f87de1d7e922f34c8ee289c3522056d92971a6692e2b85efc32e805
5f726b3e561153ede1bd48ac9ed5e0024936e813717a672f7da4b25e0f4c
fa800bfb48a1e7e6e175f9ef63c0a89c5f58e0247cffb6b72b38e8803e5f
f26674234d10b46ccb2720770ddf6955967e0376ba1f3d39ac9c7d8643d8
a4a10105b307bd14c764c20634f9019c7263efbc5d321bfdfa3065985712
28148ec3b323005d41845e2b5d3eb943227b7cabf5d57b7cb55e16d586b2
0678be197e3a3e903e411eb67df23465ead6173609fc252ee8> ND 
/l 
<10bf31705b0817c8e08e579d70bd731872938fa19da6249b22a36add018f
2d71afb39a24cba2d5b131292eaf2ea6440cd481b67673b68d5de7db4045
53f0515df79be16519f0349ec3761dc09575b85d12a0ca2ef3e3cac5171f
27c0bb5b6c16bd708dadf6acc7da72304e> ND 
/m 
<10bf3170612f50a32a221f92c62df6f217e624d0a9df1e121860640913cc
49c4b2d35b710b10afd4f958933cf36f77fa2631f24cbc39b6fb55164082
193c40e902d50b4dd0e9f5ae2867995b45675b905195bdfcc9b26d09519c
1e89df3994ea78cedeba6852e8b9c507c215033124b55ca65aeabe76ef04
57fa09d46563663ca74b6f95faf692e9ff2805a952be9ce73108295db01a
1994fa03645166fdecc81234fb6ed970d2a939579f06453bc00a9eb193c6
89afa32196c9bbfd4f2e113a0f0a380ead1a15279b212e2d6f74df100cc7
60a6d17274c6477145b98511b0f38377fb67ec75a8941a93686e94c1719c
fcfef92ae4ed1bb42acc6930c9fd7d14d03f2c5cc57e8f007a194fcdc380
4777a58ea7912850daff4d6c2854942dfb30e0675160b33e854bf7fed66f
47144c25d4528d081f2387910709746bda8159065734924af6aea3b40f49
1ba747b6dede483a966ee00175b89acc0a77eed79d9fdb> ND 
/n 
<10bf3170638bba1389001ebc99bd428947467ee318fefc1fb124f3371d83
7e6e4fd04510bb88359fc2d65b2f295b6f18b7850f6ca41f0fd067e40bcc
1e6a5b41ca20f07f1559265c094e47681cd30c939ca836f577db4be36b05
95c3d60cd00f5b5495365e7e02e3400714839e79cc3816e739cdb0ba1b66
3f096ef3ea59642b52897d5ef4b5012d68776aa74244415b9e96a4f773a5
8085f9fe5bb74ace5b6860ca975ea43b7d0db4eefeddd777982336d72d05
c093ca194b7cd3478661a723994ed178a305b939140b4ac4b7ef4bb11e73
> ND 
/o 
<10bf31705fc1db5456c194eea6db4b28ba27bcfe06dfbaea808b4b94782b
858d11975b27223d0b6d7d91b178aa636f44bd6799b0a1e7bdfe3b2848e8
67d16652cf1e1d16eb11c8e931a8c3a5c20ce3e46e302745f5c6d7e5ce21
21e333fdaa150cd3191a1e4c670506e5c48803290df3192b44aa2b4f51a0
a9c983af94e8a18415a60616a6a395b3de67178db0d5045384581c136ad0
9005bf> ND 
/r 
<10bf317063846c0d04467b4514eeaf5ad995f8d8d5368dfec5aee1c6b68a
3c0ec443b5151d573544f035f9c8d56a8c86eff8bc45b9cb7e9f7b4d2809
af6f18097fb347def46731e8a3ca8727e68580e7e5a82ffd67834895aa8a
7069ddf865d0109c1727ed7e1906ae399964f53305401f293656e81d3f7f
a520bb51b43e002474ba474471779fe9f889b94891c2fcd98f80aeea2c61
083a35a481b1750c54fd90563aed2fa403c1bb4ae1b4> ND 
/s 
<10bf31704e7c764f163406da7dbbaf9d43c65b8fb757ade7829da62aa468
ae4baad8607e81147b16ed99a46ab38e424e5512c18fc36490fe0e0e3c97
dcaa7fe80721b43eb7737e0a60636624d7c3bb6047489980efa6d2c4807d
50aa67e7cf84be79d7d15a6b706fddbf727c9c6d9b0a699629abe5e444e5
0457164832d1875637e41249b15e9b27dc3430ba6cf1c3ab4c74334bddfb
8eb29c16da6b1ed80d7e90ec9c4540b3b77731da9497fdb30cff9013413f
000a5d34ea717ad1e71f37aca4fc003a6dde001ac4d2b8ee38552cfaec10
a42d8a25> ND 
/t 
<10bf3170675b4d3401fff3ff5f765da1975e70428467ea281d5658a08302
13a3804f9a1319dd7c580c31580e87e258a447c36de3afa6295edab19ac4
8b72bc19bc7bbb33808d808ebf49d28b777c53d40fa69bc3ca85c2cf0fb2
3dcaafafc241c80c646145936a07b2aeeb3dbc48cf79b8029b13f4d41756
50d9e9> ND 
/u 
<10bf31707ec0b061a3e31ce6a8e02f67c79fc6fb9433b583752df0b97381
ced785f0788651d9110f4d168d6f4fb870b9f8634f66a1fe17ef5bb051c8
5b17a112a0ece57f7e85709c1e46ba1a1de6ef26a274c75bdde36925dd09
efae6e5faacef2f29e68904c9555df5e0f6550945360d079ca305237daa8
7397519a4b0aef19668718de15c20ef2e07af7217dbd27700833b73e8190
1c7d2aacb619fbf2f1396d79a94fea4ca18c65bd942fda84> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/TimesNewRomanPSMT findfont /Encoding get
dup 32 /space put
dup 38 /ampersand put
dup 48 /zero put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 89 /Y put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 5{/.notdef}repeat /ampersand 9{/.notdef}repeat /zero 4{/.notdef}repeat /five 
/six /.notdef /eight 4{/.notdef}repeat /equal 3{/.notdef}repeat /A /B 
/C /D /E /.notdef /G /.notdef /I 2{/.notdef}repeat 
/L /.notdef /N /.notdef /P /.notdef /R /S 
/T 4{/.notdef}repeat /Y 7{/.notdef}repeat /a /.notdef /c /.notdef 
/e /.notdef /g 4{/.notdef}repeat /l /m /n /o 
2{/.notdef}repeat /r /s /t /u 138{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*1 findfont [22 0 0 -22 0 0 ]mfnt sfnt
72.334 148.335 mov
(SPL) sh
/TimesNewRomanPSMT*1 findfont [20 0 0 -20 0 0 ]mfnt sfnt
7.99902 213.335 mov
-0.361328 0 114 (Isol target) wsh
7.99902 237.335 mov
(& Ion source) sh
531.167 94.667 mov
-1.83594 0 65 (DECAY) wsh
531.167 118.667 mov
( RING) sh
/TimesNewRomanPSMT*1 findfont [16 0 0 -16 0 0 ]mfnt sfnt
535.501 198.834 mov
(B = 5T) sh
533.501 216.001 mov
0.59375 0 32 -0.59375 0 (L  =) awsh
559.705 216.001 mov
( 6880 m) sh
/TimesNewRomanPSMT*1 findfont [22 0 0 -22 0 0 ]mfnt sfnt
45.333 360.003 mov
(PSB) sh
1 .0196078 .0117647 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs

systemdict begin
/TimesNewRomanPSMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O 
<10bf31705c375b3d5c72826b58d6c24db2332f25214f87f3cd07120b5a07
de6abd01e337f6df0c05aba96a8b20c6317d32e41fc16cfe4edf404b5453
34faa55f0a9eb4196352e560b1275b4c9ee4531f2c30985c3dd8751b6a4d
2e6f30abcaf0fe53ddce4477cad36a33507d9ea7149c22d207e69836040f
22e7e680682395cdb52cf4a778> ND 
/U 
<10bf3170625de69094c07a5362c37c2340b7aaa2ad99fa65367eb831d919
fbeb91fbcb1d1991f5fded0850a5c85234a20d0407bf7aedd0d09383513f
980325ec3206b4c3c24816431baad85f8fbd1e68433e246ebb00c0f3cbb1
811882668f5f7473971b0828de694509d80bc9338cf4a0b3a9280be6e863
8b6decfc0a73cf14336bec34d30cb5a2bc77814abd0dcf624802769c9da2
e981b90c014060ff2e989894cbf8f11d1eaaed1d790fe24e95bb8f3c7e60
a214d7756386132c18985f9e64f74d0d> ND 
systemdict /gcheck known {setglobal} if end end
end
/TimesNewRomanPSMT findfont /Encoding get
dup 79 /O put
dup 85 /U put
pop
%ADOEndSubsetFont
/TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 5{/.notdef}repeat /ampersand 9{/.notdef}repeat /zero 4{/.notdef}repeat /five 
/six /.notdef /eight 4{/.notdef}repeat /equal 3{/.notdef}repeat /A /B 
/C /D /E /.notdef /G /.notdef /I 2{/.notdef}repeat 
/L /.notdef /N /O /P /.notdef /R /S 
/T /U 3{/.notdef}repeat /Y 7{/.notdef}repeat /a /.notdef /c 
/.notdef /e /.notdef /g 4{/.notdef}repeat /l /m /n 
/o 2{/.notdef}repeat /r /s /t /u 138{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*1 findfont [28 0 0 -28 0 0 ]mfnt sfnt
23.666 28 mov
(EURISOL) sh
0 0 0 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs

systemdict begin
/TimesNewRomanPSMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F 
<10bf317069b1b5630e42cd6c8ff2cb4d3f7bc188fb90c1fdbffc389a7b7c
590172825fc5f7c1632f0e00f7f24a69c85e73a086926561cd7597f366b9
c557c28ba97bd9e48588932b584d925e90f75351236f8dee991d8b2912e0
edc0500223be1a5bd4cd44c3c3de75aa12b7e63ed3a399ba00214a66fe95
b5d95b0096ce0321bb87083de3bbc29cfe8ef473870f448ffcd9f71c6888
fa2bf4ba82669c30c14d2655a8b69d82e43f233aafad0cc27d2d> ND 
/Q 
<10bf31705c375b3d52a087ef978560249a4597ba98441cc66e94244ad145
c0a541a1f1c73421b75064f16fed0f9d96d98ffe5bded8c96b991e4622f0
f566b3985cfb967a47d863261a6fb5f92370f1d3bcca9b03ad1cc72019a5
24133eec738251411ab68de94b6288ac7bbdb5c6262a29a112be792db520
9b44dbc0c991beb06776ce24d2aa968262c9a08239582fe4b86c5988155d
bc0041cd8133b5df7a13a82809da792a74ca593c7ea83942ef83f49e78e9
4c0ff4c607a6> ND 
/i 
<10bf31705ac6fd959d25cdc7a9a3e9a496239b73578bd39bc85c0d669e22
6e691e09b0f32a97a0998434376a9ae157042bfa0f185e0e1869e77dcfcf
1555c1c8abd2efd30cc82f4c6c4ddf0f13b90a3c76a63f04f6deca3db44a
cc213f28bbe83758b298928dc74aa0666fbe3e63b2fac529d140e3b7039a
bc2bb148559fada7a9e275e919fc3f2cd6b953d39d41def61462d0b129f2
b21125b163636a99efd52186dc8496e41f> ND 
/w 
<10bf3170638a0228cdcc4cd6455c35265f3b472ea1e128291ab8c91c671e
7bd658e474e8a0535d503ea2a6704bc9226df8b7fd4286af923f66233992
4a9bd89766cd1ad48ee99eac3f679bc5f41535050fefd334434033683a0c
453c86e866b1ef55892a380c8fcdccf1c4eac1b6e4f71a2a006a7f483456
13b3a00d36c64291144c8cc1dac83b7c06950c85f226495588d8cb0539f8
dacf025ed3c1593eb5f55ae6c66c3ae3939545fa200eff0116> ND 
/x 
<10bf31706ae07dd17233d682c9e1d171e05c39e4c2e1f18748a48d85f7aa
7cc65889e1b9adc82d1a976279fe7993dae95f57dccb69a45885b73cea03
d21a96fa38c7939c2a96ece439bc9aa684358afdabeb04ef7d8ec3bb5b3c
abe7efc841c96493b46c90a45df4b325a723eff80649b127668ef3097078
a3aa469a18461e5d2dd1ff75b61f9703453844d7df91eb99a0ed3ff61a59
265671b958253b91d2e399cb7b2f436352e5fb24345fa1f70fd78f1ff451
7a30037eb3eb35f2e10ea2490fd5cc6e967836f42e303278ce23561832f8
8625704ea3dc> ND 
systemdict /gcheck known {setglobal} if end end
end
/TimesNewRomanPSMT findfont /Encoding get
dup 70 /F put
dup 81 /Q put
dup 105 /i put
dup 119 /w put
dup 120 /x put
pop
%ADOEndSubsetFont
/TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 5{/.notdef}repeat /ampersand 9{/.notdef}repeat /zero 4{/.notdef}repeat /five 
/six /.notdef /eight 4{/.notdef}repeat /equal 3{/.notdef}repeat /A /B 
/C /D /E /F /G /.notdef /I 2{/.notdef}repeat 
/L /.notdef /N /O /P /Q /R /S 
/T /U 3{/.notdef}repeat /Y 7{/.notdef}repeat /a /.notdef /c 
/.notdef /e /.notdef /g /.notdef /i 2{/.notdef}repeat /l 
/m /n /o 2{/.notdef}repeat /r /s /t /u 
/.notdef /w /x 135{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*1 findfont [22 0 0 -22 0 0 ]mfnt sfnt
264.667 38.3335 mov
(Existing at CERN) sh
18.666 276.667 mov
(New RFQ) sh
2 lw
0 lj
4 ml
[6 6 ] 0 dsh
157 355.302 mo
157 372.532 147.217 386.503 135.147 386.503 cv
22.8525 386.503 li
10.7832 386.503 1 372.532 1 355.302 cv
1 75.3682 li
1 58.1367 10.7832 44.168 22.8525 44.168 cv
135.147 44.168 li
147.217 44.168 157 58.1367 157 75.3682 cv
157 355.302 li
cp
1 .341176 .121569 rgb
s
124.668 66.335 mo
124.668 197.335 li
0 0 0 rgb
f
3 lw
[] 0 dsh
124.668 66.335 mo
124.668 197.335 li
1 0 0 rgb
s
2 lw
135.668 242.335 mo
112.668 242.335 li
112.668 199.335 li
135.668 199.335 li
135.668 242.335 li
cp
1 0 0 rgb
s
124.333 243.335 mo
124.333 254.001 li
1 1 1 rgb
ef
1 lw
8 ml
124.333 243.335 mo
124.333 254.001 li
1 0 0 rgb
s
125 274.001 mo
125 286.001 li
1 1 1 rgb
ef
125 274.001 mo
125 286.001 li
1 0 0 rgb
s
2 lw
1 lc
131.25 324.916 mo
118.583 324.916 li
118.583 286.25 li
131.25 286.25 li
131.25 324.916 li
cp
.968627 0 0 rgb
s
1 lw
0 lc
4 ml
120.416 360.073 mo
241.666 364.668 li
.980392 0 0 rgb
s
0 0 0 rgb
/TimesNewRomanPSMT*1 findfont [20 0 0 -20 0 0 ]mfnt sfnt
326.666 211.667 mov
(SPS) sh
[6 6 ] 0 dsh
489.999 349.001 mo
490.379 360.583 485.689 372.335 473.651 372.335 cv
201.796 372.335 li
189.757 372.335 179.999 361.589 179.999 348.335 cv
179.999 93.001 li
179.999 79.7461 189.757 69.001 201.796 69.001 cv
473.651 69.001 li
485.689 69.001 490.379 78.583 489.999 93.668 cv
489.999 349.001 li
cp
0 0 0 rgb
s
2 lw
[] 0 dsh
473.999 202.667 mo
473.999 133.079 417.587 76.667 347.999 76.667 cv
278.411 76.667 221.999 133.079 221.999 202.667 cv
221.999 272.255 278.411 328.667 347.999 328.667 cv
417.587 328.667 473.999 272.255 473.999 202.667 cv
cp
0 0 0 rgb
s
1 lw
266.417 336.083 mo
234.417 257.583 li
0 0 0 rgb
s
2 lw
266.666 340.168 mo
266.666 326.637 255.473 315.668 241.666 315.668 cv
227.859 315.668 216.666 326.637 216.666 340.168 cv
216.666 353.7 227.859 364.668 241.666 364.668 cv
255.473 364.668 266.666 353.7 266.666 340.168 cv
cp
0 0 0 rgb
s
0 0 0 rgb
/TimesNewRomanPSMT*1 findfont [20 0 0 -20 0 0 ]mfnt sfnt
231.333 348.333 mov
(PS) sh
509.667 353.999 mo
509.667 71.332 li
509.667 71.332 518.335 33.999 560.999 33.332 cv
603.667 32.665 616.335 71.332 616.335 71.332 cv
616.335 353.999 li
0 .682353 .0705882 rgb
s
509.667 353.331 mo
509.667 353.331 518.335 390.665 560.999 391.331 cv
603.667 391.999 616.335 353.331 616.335 353.331 cv
0 .682353 .0705882 rgb
s
1 lw
473 183.334 mo
473 183.334 483.667 217.334 493.667 215.334 cv
503.667 213.334 509.917 245.917 509.917 245.917 cv
0 .682353 .0705882 rgb
s
0 0 0 rgb
/TimesNewRomanPSMT*1 findfont [22 0 0 -22 0 0 ]mfnt sfnt
38.666 318.667 mov
( Linac) sh
%ADOBeginClientInjection: EndPageContent "AI10"
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (osservat) (infn)
%%Title: (beta_sketch.eps)
%%CreationDate: 10/8/2004 11:47 AM
%AI9_DataStream
%Gb"-6CMta_OuE)\%JW.%Yipc[gQF<`-8Vu@YX"JReDhFUD:n9#B%@e9Fel=Fm?2Q\(V;h_q<o9K'1!s$.s3pshd.;!O,LtL13j0q
%4E2P9=2.qp4Bu5u?@TGqq9s6u7npC1Q!6)M>;Ud+n:P*HlCT]Df\MO*$N4tC>MOJY2QiCYgZ-";M<;>54A)_oc6'34fCtophOO'&
%mS7]o2n+"G?(Co$]jCVcqjmYj?2XS;^VBSaZ.a-Bs&bRI]=GYBHb[/)g>.1gqsfT6X6oTC?iL&*nt%KVhS.fQmOk*@GPQ7Mc.V3-
%GBS%S[Coqcj,09()`HghGL?h4&CQmEnb)_WiF;PlZtFUQnWj$$a'[P=puT]TrOiVj4KV(G^A-Nam+cLq'sE\4raPWXjk]n&pAXXF
%qEKFg>F-F%IH[$0[p/es.[,2>qFH'?XEWQ>+85H_R`064,k$5r5Sa=nij6,8\RVTe&$##h?F=*Fc:HPa/cTMoT7=REBr@e:[0Y$o
%a]2OSe"Z1=+-4hFC3T>o^V/Ne"FLrFRt[4)DT[(4<CU7CV64!qWGW<ZAeDXg^CS8fqr)Sij)5b6[+epRDJd[b\+a69rg1i'([C%`
%l]nVXgI/[4Mhh9!p(,cApGNc0O*_o(hqq]*p*l%;SaEnRYc?n1s)3+/[CuNVG;&T:Z[]dSatp*jgSYQ`T59#2h%gOsm-X6;X.0..
%-6KeT9=MO1QN,.L4'=;OPMt$%WU!"9Mj[/EU'ak]WbsOKT*odiG'j&@jn3Q@Lah$PDa*'mh;*Ob42:g_;7C5N+O_)A8,;?*9*_7l
%-YlVW\mKPKYeRf`]GTk?Fc0#pa3GcN`P4V8ZTcNfh;@\(NQ='1(T02nQn'_A?`f!gYD)992rE;l_\`;!c[9tQZcn@]/ig3"&%B#G
%a]hp4d\Ok\mDEg][nGUCr8?XD!AD1Eril9#<qkVMk'ljXq$C0mZg7RoM@VqMS&NA.q>K=4iU,V69$;(Mi7%)DDDCb,Mqtjca&bL=
%h(=#:nb__PmH'rU?cu8G<RnR\&lnbh5Dn3^GN[E37:!H#jK<]qIH9]LqoeTcbI@4D_iV9hon/#+/_!OriW%=^2V7+N@)r`-`5VHD
%G5Dq7$$()]ZhX".ag$eogq.h.T`+n_`OE]ghVPoQ)YT)QrT3_?rarFMfj7eCe`,ZTk(cOjq;Og)Djn:a\D1G]I_WS8jSU+CMjlZ;
%Da*%H+3=:rDSH4[s002M>O;?2rr(j;Rl?].qjTN/h=!0fRe>*<Uk4pJir.bAnhHEd/d7,F$gS3/.>FNXs$97bB_K((n*[qtI.T),
%0"sq<HjS`(6KJ$_p>R9]Hr76M\GN7A23TKhr9!BBS;YdS5!M\t>[H=VDL^=,Xo05m'9)\SGLD<=]7k4,TtVVOq&M'$#O.hA-BQ0@
%s&024bIPMHA`91ucbJ@C#kpL>/cJ9.phq$%A4uS[?=(]Tr6OBngYMjHGOY5X3<JeJhu.85ro"+^ZZpP:D,_/'i<&qD,q,Y'lf;F(
%LKUdKac"6(s/pQ1^>37Y)Hd`h,$0s",%kH*2Z]Q$U61]QWd5g_C1:HC:4Pr@074`3;Zn4l6F-;_$7eUrlX[O4T9Z%#Nscb-&T(9\
%OW$P>BiZ((^B`pjK&WD,KN=\tp8ehpWKLl7&oXQMI^[sh)Z3gFjHf#k=i*.m84QW-Q,HEIXntQR]sP6-Vu5VP?d+\Ii"ej%/*1;,
%U?_r=an%p=o$ci!86,_)OM9-TH$5#1Q]l%bR2P/k!_CpKOM5GhCCHFa\sE?+4tL4u0IUVHB,/j\](Q!jg,b$Q)*R6EU6EXfiO(f,
%#WMu%NG!J5`3Y.X0h]M`jHZ(rCKO;`V?00dQ!i\7d282uD/H*s'lXQW`bI3:;S;5qCQ!>+*Y<rf.nYSWRRJ_o:pWkJ#/"9LdaV=g
%V5(G.&))QZ`5Nch88bnMARo>i>Np+IR>ZY`0^LR>;'nmr&_Xh\*A]0=&Z;;n8oS[qb=$]n#&(J>HJPg#%0g-NZ4Sj6%:C"aPh4&g
%I&1>X!OW8KZks?45"\=t4J\7S60$[e2YTk6cc&^+jT\;Jmr.W;\lr>lNKjEJ+UR^]S;7BJ+.nZQ1's+0VkrKW*mntL4XL0iJsJ>f
%2Yb3aJNU3u5f$QSd]TN*&nKrhBhXV\S)->5r<^RgM^Vu08EZN@lRT)6P#4]HQ*/1[?<S:ib-2e:%'di)4Z];83Zn%Gb:Lds\\e<N
%Z?l3VR("C678LU/<4oK%jk)<&(*Wc"e,fT$IbG.Fr8B#+Y`@DPI/9%gN0EZiBr!*jPYZX&L\31H.k;^&pG,8lf^d#`O`#apgR>2O
%b7?fDNH@Gk)s`Zh*;AuQN9Pe<\_g2nV6?cO;Yj`.XiZCK1-77fFbeM!7IKunVD_,BM:,3<$)]:QAu,OGO9I9Z==Mr_E#"=>OCdO,
%K(/#WdR9#T/@6OPhiO$/q:+,8&3>,;K@-@r*Bt3=P@WK.A9bKn5u_`-j!UN&q5'5!aOk!ZiCQ3.YF!;)mID[MQ^![?PdORce#`T4
%GpLDQUB]EFUmP?\;'Z+Vm%R="/b9ldYO#2V")<uH`'uq[QCmrOeYMC5nqlUsml&F$e^?&f\44QibD8)SV\uS26K=p8U#Do1SMn5_
%16PjVck$K3k!Q^+9YsGt@`;aa+g#(,"OL^Kmd2K@2E<=#4CC#B73@be_4/*A^kNI&T3dj%P9$r>FQHjJT3%+^1F5?V5-Rm%@qd*2
%fj:WiP,K^sP86M"F?64j&ZcgP3F:8UqC<J^Oq?2bc*;<Go<[k%80o-qPj@%%c7!=K+<AhCP`preAa4.&7\mNq;&7Z\@o+af&g5R_
%XfKouBnNdskA&BD^l8(h*o912/IW59&1Vp4_#KllYTc+IZlJc17VURR_th7Q"PK\1.1bGoQ'j]H-A.WJ&CfXn,^+3>#S!W"*j,#s
%>)oj.<\%36QDG!,YlR%@i>p7<`SFk!fOHX;6(`d`gp-rgcSa@`Xs=@\SkBA04!g^q9_3_#nbpY1joFNI:jGjQjfu7Ea<6.i=$`+'
%Uu_+<Pg'\^]9_O-(e=>Y5gZ=R!?m2T'MVFV'*/Ca7"Y*@E'!Msqa(_.K&q.ipUXTpE5Jh0j-snS,B)%cTndk*Z(FE(jqR_jV$0&R
%Z4\KG#fK3qciKaWY%fBm]WfXGR]lNY%-<n!<?ScORf^@HN'^S[$;nMG_&!dMK<`^Q!J*bW`2Bu$2%dAk4@Q\sC.`aa;Fc`_0Zp=6
%Cq<V[AfQ.^9[<iYE&<Bq*B5.VAAH'"-uZcD%"JVH@$"]`9U+pd83&df,gmWfC4+U7&gWX%ZS60.Tr(P3eq77-Qj']!".h9.aDere
%1+q!$Ppfb6:ALU=$^U6Td"=t\:-F>oTACr)!WsS]^_.<@!T$68Lt!tj@16tdNPR,IAp5B**ET1[9Rq)h[j)#5:l1EY%WJ+"'%\bc
%$Y>/eX"i(<D6tbr@Ckca#mLoR8Z`2eNh7erR-^M*<"s^fg]i+Q&#e-BqZ*AkMugJVO=*!O4Z*_L9j.lL'7fem"bl==BrHTA0lT!<
%JK)>hLa\8E7u0[785VauW1d*3;=g)Eg`;Zb!D<OF$\/9MQOhD;+XLTO\m&:@NN0^C3ZR8u<#R4`e,09d!6o"=AZ0E_`m\/dd'XR#
%6)Khj1gGiIS;Mhn<<Idk4EX\R7cdZAZ7dud1=BR_dJ-KZ#q_[bJddN#@[?p_qRTVt!Q@o/;)1Cb':.JT2;kf<>!ULn8deYD`?/(F
%nM8dKhu`KqYbItb=.>mh*3XT/<JFj0G,7+M.>6i]+qZ)I0KR8YU>(cp$S9Vq$l#qdQEK8r`KG7))*h[[]j;O:WA-s=<.N2'f2IW\
%n($??U"'=(M%^@jYhgn[E!?akRD8K^D7qqO3q`mu[[o*]B\bGXYZ(T896+sm5gF(Iq**[r!N0<i>q1l1'mDuN>,Y!ff>q0)'2u4E
%!.t^RQ"lJd_0bCkr%Q$FVbYc%=BU<SA_]gP1cboUFC:TfdV<(WP,bHk]7*<#CiN\,/J2PPTjRpLWHt[c$&B\#D]hGT--[hfddTtt
%P+XJWjCMqWbb[M)+PJ?m["b<+&tlRCFkRT2_48kAJUkN=,,l3>ALe>'L(\W-o0ZY+;BW&+A.?7eo^4CWNk0HHQ=J#n`"SP1]hqiB
%L/mCk&@$u>5"iV3G2:"$@XosdRWSr@)mEenk,1On,T@8C+cHGj(3lrj52Z\HK`I,8UKOOpbY`-\5QI]rM#+(-[CRj"KEGun($M&]
%WRs!1?Jba\8W@%X/8Ds/5js;,LQ0X2H*,G.Y=Ysc)Q"5u*fR(s2?Xis*QBG>md_@`XF&i>!]UE]9gHI^cdZn=XUI)qi(8rk.OPgE
%a]/[+@DO2P<'-<iJQZBL,1L@Snf*`8cjm-[6B'8n@8Knj"OR5Ed#_b[Vp3`e"Ba1oIK1nfGf\su;VKMh(lW)f-:<L/WlSFSV9fYl
%Bbee.nB"K'$-Kr_XoJJ2TF$=nf*UpMlC"kL"_%IMr39>]$N1[M(IY'uYc^oA(2*_`/>8]pFm/'f57Jqk:c2ub<+oR-,"fD^Fc%Rt
%l@McU"&T:+ZaQ(/*DBZk#iOmGi[6$UX'*rB!OsXhM0$)?!mK&N!D(R=g%JRJ:&u"A5W;t(9%-JNn-muVWJOX6*`l?1r8=?D>9/cb
%/;U_KG.FSMO3tF</8Tg?Y^9r>=P+hAJ<U'(UTDFh5[KGJ&A6r&_AE=F)t6C(/\iOR!a/+,!">S'CDs68<C52%?"XOfXXr,DMU-r^
%Bb_8?@?n^JhU3h[1S8F$+=MLH!$j`BG=r9H-J0[[-J38&.d8in<4!c,KJ5o=PHZ<qTq_jhU%q'&8ur$/d6mj:NaQ.S.!<]J%m(DG
%A?8D5#$c#67-N:75f;O^\udio@>YheRMnZ>`^C.s8'Rh62pruP41Kq4Je:/G\](&7*5d:>;&)!hXL5o*B[]4khNRD:!Ca>E<fNPV
%@AX%kL=*h@9odq*r^L&\NGHXgW9M/l!,Xlt*64-e4*Jjopb:@%b0raRY9:q@,tZF%K.GIpi048Z<0C'.%^\f@?c2r<j/5tJ)3QZ]
%6-[HUN3J`7,Xb<>"VWHX[1]L-0r2Yl@+hR`JqEf"PsC?Ba?:c!3)57q%aP<jKD>cg]$?MsdjD7:/.Edgl:k&HDs7'RgIA<Z-t*0C
%804D[YRh6@TqMo.$a$,U=\/l6H&`t+=5@K6eLThRLR\asHj,oXQj!T![m5$D`ebu-9b@b0enK.M5a)<.`+lG`K'G*:_,n/Ai),@=
%</jpDF,_BGVD(ZnA]e\[8Z>aiJp(D,)F^tG;ZDKkTo[3+A&`4VC8-Clp_-8FCoAnRao[K*+Do4k6>3AC)IWi/$;qce&Q]p.,g&C4
%R=GuIgoDBW0KV6:F_S<=IOV@]#_oomdgJ]PX#KK;J>QDqVZK-m)iXWC?u@8[F]bc]0f0G,eEXnm&=ig/(g+BDbTDZFda1J2WP>Z<
%?'h]]XV7oa-$o_Z&:H556Oe0TZ2o46%kt-$C-ZQ\Q,qDTV1>V@1Go-O6m#/=!$hTHOG)F>,pOF/J\L*/2F+J>!uOK.\Nl"C!7pZr
%[D#Z9NTgt]>!&dLHn!_jfJS6QN9nZh5kZ<jO?L!qK-i;G"ATuEps>uNJT/l]<^NuG<dQuk^$@K-4-pgl>GdAGo)^UIL=oG/g(]mj
%qZ2aR'kgGE)4O,-[&jBnW6'XcZqF%<Y6UM$_+5M7Z5=`N?FFgDK(/*E)r&:M%@"biOqY8N3hK<4Gn,K51LY'7MC-B0MEHj/?k7!"
%6A*g?9=K/2eMLB4'lnmC;j(05Y9`'W1K>@WNO6(r\o9ab@\"EAi?`P%@B$]T:M%2cPtX>2'#[?LWlmt5$$f2`AQ3p(B<*D!QdTK`
%7?[an`T1?h7[T%H?9t@RPX].g,u>JQ8jN'P'NBYrRHk60?-6g<:*<'bcGi1%HHh&%Jk,omb\.S#275k@>t!DJnS(6XP&T&7I6?,:
%iD%aZY($0A@H+P)!T.J$.4o@_`X\(<WcKc?Sk)DTE%WmG!d9H%q3?54CW'C!U7kJ(.C5N5Au!]d@d"(Cm9s-lJ?u/Y&a$VNq3d?H
%JaP*]LuD?i_nMuh4o5''CU?ks0>\7h#lt(heC84j;26"!R3*aJ"t2)pd\RdA<ASd.5q%?D6:@LD<&8[E2))WM&]6*^+=ZfZ.gF*b
%UC*qh;XD7)/-N+(2FJs56FEpJjCIlP]!=%t0H\HU2J.oGV:lf>TW(]B*]3pNbq6H?iMSVMG,*1b`*In_]kRl-;'0q!DjF2l=sZ9N
%2%/CTC_]jrG\>KJ1i,QTTjo@-"n@-1"gt3rds(N'8pJ<il4<fbFDMW=_*Y/^"D:"[b.'^+/JV#70%VAg7DV5un'%l$(fsM!]=0'P
%Ujs-JErb@'-QHa`Lf'/JI+3H/HGUBiQ:Z]tUQilU.YD<WK+]SR!(F`jX'cAFU[]f`l8FP-V`G'i,DlhUR](bRA>2DR'GWc""_>Ao
%m&ALB`6D#A0N-+m^a)<R,j_Em=nH#]Br;2^[1&b5+/m^V@BBQ,%Jslq9;&0mIRVsPbjDU,+3gJ-FTEVGOHVpo1T)2MRm[bl.jVNR
%NY^bFXHDADPT$<Y6nj=g&X`000:@iA8O\=-")<QUKHA2\'!b.NVLV&8%-fQ>E8?`Q3"nWZ7;;dCL'p[Vntmp[VCQck*Z3pIVi"GH
%3+4eATrpch*9-!D3$oafP$&jDJCk'XR#72Zn1?giBCGc["L+:,^eq4l"u9"V:W4/5?]k7d]YI#P'uUR\)Z&^F`JQI)r\nRS,j25?
%A@Nu27kdID#:kL@NV#+INf8@uRB0m],goJVqJ37!)V2"2&>tVl.9K'D=%.SfFdG'A7Z@6TT#3U/_'01<RZ`Kk+np(X6VUP_=[:P,
%UQi3e'9T]*+J[.k?u@EW`c12DRsN<_250_uHD)do'tH9)ft\m.1o1UP;ipKW:Z-U9alZV$iU"@fK8!0b6&6A1d9O[5L*Nqni"F7q
%Iu$aKf)W6'oB.t::kUKAC=R(KWeGmhG_m36a=+>,3&3!FeFAqY-5C%PE!nca.+Il9qg3o(+9gc(2WH7-Hf?Kq2c,*KkBuLHG]]Cc
%,o'd$UgrG-a;Mo$I-gIO6P),V&n9)>3eRPJU'<@%N-nRT#.(S8)%/p]kKM3]s!O?'6j;Ed.L6n,1^`(X"LV).Wa(4p![16l#3_4(
%<8]:5P#YbcWC,i9hd0%gbs@j?UQX-C!_lZ>s#S/F6?fYY:E%J.YJH2,&Et(_@b(qlgbH=FdEg\IDS_8N5\6)7R`;^p2Q1m(U)qa]
%l8)qj:T^B4RRXP!ZVbO6,92YOh31;_NA"1!s/=p92N"nr;/G6XH'.*QH!I->$!8Y)+!0]XKE.Q6qp<`IJu:?.oGZ4/'n+UcdY+/e
%lu1$IY1-GP6=H6*Sk'?p&LT99@*(K1fGUhp>POf=#[/(B@$!XTPZh=#f5,-tk\5C]-`E.lp!iu7r.W9M^*0.9"(X5`)^=&bl^T<T
%'ss'[X%Ed3(n=!s,GX0^KUBb)^<5cg*&rjj9Qr>aJrjC8VD4DgW_Nag)KR&D&FBa=D5@Gh`0q6J"RWBo?Vk?/$Fq&1&N)Vs(g9o%
%1HB<SS@2%[((a2_Ip`:W/VlCFY7&.l#fp\<"(V-=.`5>C\8e'%R@tin*$R9V;)&e"_9*sj_5?GtL$H]$AoMO6&ctO`C>.`G"BZ8F
%\]SC';5@+s)jmcE=p/]":bthI3M\q\dbl?<isE7;fh^%M5V8I;dMuLhbT^k0:]dfLK>dj]$o+isE;pcALAK_@<M2>*LfGUpNS%7N
%^an\HSJg/Fqu@[)J5/d(p0PZ(*@&RgJ]E=mRp(S6ADku]")l\fBX+1h648Oq2B'7AFjbkQd7OBdVtK`E+KmeEMhB;S2'Y._*"-9Z
%*o.;cK>=cos)%-T9Wk;CgZu!S/2HDnO>n)'$^tcH_&aKW"BriYUB-ZS,3fEg*H!:,9Ds]:Dj3*6"++la-3CmoiHFmNX#IeLX.t*B
%X2?AfDoQ&\3EJ^N,SF1&;m*:.5VP#6=-(MSCZXhKF9RWD`mnjI=+Gt:"oES'+nCr\22d$ABhO?^KY7Tb"=(%n*H0";Ulc;qb+q)!
%/+qAi0VE,0R&S.$&p/+U2Hh@ce1WUl6V5-UKNs:(T!:/-<7L[`BS,Ld"6gO,5g[jjaO'-Wc1Immq.Nq)'-kir-eM"P<O_[i/M*kC
%Y7LmC0'LYmCE]'UA5'TrjBs#a_F:Ya^M"r]n)CRW/U@m"5,_Sf2d00:!Hc\J.CB,c/15u<0K6dp?oE/"`Z:pFqJXmBSK6)H\99\m
%_gKupb$<I_K6]*-=p$E95<qpf>Jh9X`ZE'7n-+8nAH`.(i\oq4;4&:Cc,>DZn/@7&C_Ril%<)d:8,-d;)Na#t*tKTnmTri^L/:MP
%E!UQ=.,/7-Io+jC%/R>=`X&k[FBfV1rLdMhCQp&3Qjb=q^h>*Ze4f7t3mn<4Y"pLVb5pYN$OsCQ>n(;?+@$#6?Q0/uPgc!J.%q[@
%;9acF3-OQ,;6NjalJm*D1$0AH96I25P<.d"2`n,=ZR*G=l2s"46d4feZSe)BDG5Vlda;id^ger!pJe3jM\u'e3H&XK%$k5m,=]Ko
%:=b6Fco?\;m"u_2WHLqe[qcB6KTVE`SJHqFajM'NM%N)tKpcuF6?33@Ohh'iTD5D;,\+,g\#,#2+s\X\"$tC)e1+ac(-:bqg^UX=
%,/U(Kgc2d6FD<+t+3EO7S(F)cRmS!AQZdJ$IFZG9Qr8f"@!7f8"RMhTNraYDj"_0d7l-hBDlOBMTb3E^*O6,1W^aJLUfgKT7-%aO
%R2W<Y2I-@KFpj5lX8=H0@Z!688qhH;%>ielAOn6b;d@A*r$VTjG$uqh;;X!o:`+JSbu?(!-=NDEHj,/o(0d!^b8dWO%6)AmCc8_I
%"=&X++dN?F_jufB@HK8bTGA::4q%@V:?[6b^8[T4m:sj(#]#;9?$q52E'4:H6*Xis@,>hG*n/R9ATg)Dg_t(kWd1m@XbL^1mf>Qg
%=rI^DPKggRjGd[9*X5ju"/ZcC?pt9W<`<H-Z[/(e@57G^R%C@tS:TB&dd$'O0](a/N*GiXC6/k.nS(iIF#oI<_Ekc+2766R/]Yr2
%8n4.UE/PRkdd7^n@T$j6.2'bRSkWF(&@2oa\m7m9OE41IB)!qPBj_@]Ub(dG8KJMk;uG%GW*XS=;skCkh#:F'7EUl=N*U!2\ZG>s
%F7m/GCWkZH9TA9</UdS:o5WmCjL1^Jn97?\e-krOWY0HW;+1aCgKP<A@]pC20Tql/!+;:ne(.!^as5TNN*Y2S1(?TAR7rp`4KpIb
%quc*jK;OUs.lE&<:+\mCH#:cgenP%%VB3r%4OhD>dPO@$fgBgqL?L-e_Tc_qWaMu@lm:j6>@>*Bq!/eBAMsms0cK^r9_bTn`$BpU
%d3pDHe:LZ,U'6NoE[>"79st(&H*EYmoq3p97^d%EobL/#-#=@)_k"eZ@^&hU_tRC$V?e^hD!,SCp4#=HheUY"2NjX!.tBo1gUj!p
%]U_(`ggK]u6.n7n)hF>9@=5Yi;G*_0\]J.%N4PU2[hs>2:qo7[YmO!;BB^rM6>)Th[3sjkV@:ieB]'I^T-U-**gkDg+SP(6CF^FE
%[P$chhX]K`P-6(hG[QP_&_3[s"NgdD`E)k$Y\!UgW7UH-#5K0^OAm<$p3CUTDWQ'6k8K)JK:)(,,4s/S.)8?o!(`(XOYDXpV'&`g
%gZ,OLW\nQ;,H*aGm^g<J*pf-DdC6S1'nG"Cp'i1k\a:o!+Z62m$2_\n,!1ktGJ;HfV`'@(a"J!<_rQW%ILZ$h#/q>P!>`hnGihJ(
%4QWm:f@AeYC^j74PDu@A+/T@_B2i`"e22^V0%B_C/#(d5453?*]2m/.9+=7b-'R9Z+`6U^e"1cl*gd(R)JGEB?OBfQV9$O/GhnE%
%N)OgZ:Y6US4$,V8I%'kVY;%ce'[p`'Ep`L@#f&8STd#@'ZWhKL%p-uL-MZPc$m1[6+Xu'dcpmBidC-qO7tp5a&37XVh;VTM:`i,@
%7i!^(oYHMe:3Z)0KPaLiJ17XD([uN"15p*:2fN9)V><b+'*C1O;^7,;RFbYZEM).pPO*\7^g.4Ag\q<4K;5`IHhFppaP5heh2LBG
%L3R\7[6=r>??$)JE5NeDZq23^St#V7eUFH8e)FsOA/3@2YW@CO,8e2)9p'Ot;K(+qY3'5KE)RQ&@kHC832g9n=:R\!5A^C9%@tP<
%ELX@QB#7=LRtoOkdX?Ph_Up9&e>DW]f&J@r2Hn'oq_XPF>X6"\F(2=(!4o\ZWd(/J6siR5YRd[f5$?]Gc0BBu.4b)e9F4MD]#MbZ
%drm\p$/6j#IpFYG*Z1XXH,rnoe?YWi9!?@*B3=e*M/CQqm-fqF!%ZlJjO+Bd.bN)sh/a5A8).TM;@E7786eY##2TP2_%du]$e?^c
%m92S(_DB'Qp;SGBGQh4j`oCMH4*i_$(l?M,*2$=I+PY"n?8oI]6jKU3"4J-oV)G?t[PFnh>-0h$o,=^I%WV<dca(.Yeq/gb$<uq2
%eoBsF\BlK5\ETbciLmKM-aj;>O&:8)L#I*O9M'g:_eWW#[%!jI!/Ek0X6?SfFKo[65jMOaNpNP*ktE3eC".Q;WD/AE?/BAc\uG;.
%VIrYJLXPku4];dt'NQYfVp[+e!'i]2a2V1?).8fEMB[r[e6qZ/Tu3,ro%3D@2c[03Zj"&pibc4j;d4ACEe6<-''tkVV,K/EdV!C'
%eMmi"R,!n\&r:[EX!"ocTTtGT)keS?ei6nFpu=p!,u!LC_?_Fi9H>_sT(I#%/)0TY/*J"d-*;XM+W3h&89kaYBCMj;F.gYf%T^B]
%+@f6C0uZhVgC@rOdQ7/2?m>/HLY7u6<--*:PQeJR;sB?7r$7NXO_n2g1IKl1l"i313h?6Nj@GsQGmQ9&5%XrC.j6l',<43^#=Jd;
%LfA.i?mQ]@/1:LC3XSZa0s2L4)\""7+hT5`b^&%VX@!KhB@a"Ii.u6*IS310bIFB0R):^6l+*G+kn,)MH?bsEZf;A-np,8,`E2g+
%7rlcf6MRe[26<)>^*-9i0b0-o,U`":!;9[&0j$Hr)o5:Z%$[m3$3kQQYM7n.Bun"!G,UK]Z[0lq4L_G1E$)rY!#Emd&m>XI]4`b7
%Q!0"2]Eg&A,koG3YWj$f9U,M+K3W)TrGe<jg7s9MbQs:1bjX%[gemR3e'eeM"$$g>=ja'oDRS(fFaC:bg((GLf8)IQ7Nf^>kE49E
%e-cP%MJ3)V@/R;XVWCr1:`\*:`ahohV^$LfRu"&'N.o5-[sB0!D$UAsQ3YZ&Z=n-D[D3A>-'/mb;>mlSIO=#/j<bO^W_/%L@<Xeo
%?,LARfXq[(PDhVpB(a:`;npV5/rob/VtX0:$u+7n%*<_s;`r@j:_!LHnVH$ZOgm[4pbX?%P+A16G/U%)(,mIS98e&6F$#BnG)XO)
%ZMe?p=;UsO,$_3/mrDQ"_NYdA?-5i_VF//Tgi1@V7?(\:ZIhcP=[ueZl8_3$#00IWNWagnfk7;pj\n`-q$JZl?km++J'Vt&Ltn&s
%9VCma7$i'N'/p1b7eUWIVb=ILRV%IC5(iWMYY]_17\"'632KXqRS*7]dt%>hU41fS)qre@BVI(0eXN$g#g\Ij8hJB%l1dgi&N%Zk
%]u<#id3#ku7+$+A:+$*<kZbB.6N`$W=])mNUuA`om[(`8Lrn!qe,Z)m$P**dl#^,P8'MLK2.mf<,sKRg7UBB"TU$i8MCL>\3[pb8
%fL*ukIs=AR.A\_:o^p4;LO>RX"03SRAodr)7:1"?_#g@P"&5f*qAIU"m@fV0FO!o*TNSOb8W.:u25k^Jq,25p#e!/BR&MUBOK.i`
%U=krCJ972%ME115P,Pf6Ql:SD=lHn2[UH4TD9IeT*#YcF&5cuF+@[729n(YXD[m[TL2'[UTB;eB6Q_&9bsA:M%YDtlI!cFXBBPqi
%o,Lm'V/pU#<eZr6XphJuPkOpcY.PskY)&`DTrBfgf,_3ETdg*\>7n"*ASG/0J>Z])",%l2Y`VBf`1<h2fYoZXSXsa%b9Cq:[.3j3
%iT_k*Aub"8B=\4RPr(FuNIC:`_Btu-Kg:t)fo">_Ws&/9:l45+=dn6r<5_M3qN3*JW`I5DLS4>V.%EE687`fAiJNeO!j1&0(*T6l
%UXh=o@H&NuId>52hlDbVFXJ1o9gDYS:n*kj5KAa\4]>scK9GZ4/HcN6?*m>[%YH&a#dpjP[#e2OC6#iJ[1*oR%O"3MJO<5>;LAZs
%=EA8Kf2*dJB#n)L78P\!%i[,H!IIZk4Ig`m8`7<pI1hTVFi81%!&cr38=`OO2b1]QcGNt^s/Aje?)$U.ot?q"B(c@0krCXfA*!Ea
%K:'*Vm5<Rs%gFM9:Ihje1rDDRJoe\`(1lR?>/!':N-,[N%?&qU8rl+!h2j<4HcoBHP?d1ZnC&e"1I?dCI7d.P,,l&"%*,S)4$CX6
%Kf#=%;i943;MMN#C(4nqb@"s(3OS0rXbGeXS?$]oD$:Dh$lF_*j.:'oPO`j@ErpR;<iHeY2H?]W+H4^LG4HLT%(7;DiHhG^TfLF)
%?r'-?VqIZ`7:9.3bTg(2fGb6"JZZ^`*qVJ.T-8(GF(Tc>,RgipG-ILN:+.-!!!&P6$o+RC@V1E>0gqoV^oP"uMR>2c*K$fMrIOg)
%+fZ$57GEs0=fb2mVfR!,;?4TLe<K5S6hJ_9_$V&Nlg<=:W74,.n9j5DM::"CpXMVT0gS\j^_N8FSXH-P-5`!S\qC8sVbE3G?65>s
%Qsc_nJaUuV^#hTs-[.uD,1Y-U.X$iB%d*9+N;IqnP38N`(3*j)3mqN>S.9>-UZ!P7N2D<LE1`b+$Nn5U=l!>`SB`R]WtVDsnd'>o
%eYW$t,`LmuB.@'<c=;d[kE/(Hl45M5G[<g/M5T/E+,T1.IVf)i*BaFS.i`ojg>R9j4\(j5Pt0tj[+o>\6jQV&CuJog)^9d^je7GK
%E[KMANP0?=b\V=`)/4GonUL&RGM;$n;Zp7MSZirRA2[#7or>=OL)aSXg\)qHW^gXI]%>Hb]%;;8mQ(-J@Zobd2NXi#kcm;+[[;\I
%e25Ar^spf=O.VM%(1_+*W&*3$%@X']ER@b\b_LF:2GGirqL@f17(l'C>u/?SFB[*5pI4AKe\*u[;uskqk3bu_#=u1G6PG"!'BP`u
%ed0u._k7o%dqPq1llZD2.c'T4#?E$?kEAuN<?5&`VT'W6Q48!RY(/--,95CG=`*BCW3aa_<V&BPZS3Y.=3lY.^RUnLK5b&5!ujmM
%1EUb-O/fP4[nlVC54d0V4X@7J(1"A)Jq;'bl#];%c-/2cNtNN\p[*2p6C/0s@+Ts24KWZW*TZLQ_i8Jh\Yb"s69?HOU[WqJ7TdO?
%L_(5jNfLhr(fc1-K3>!P>No:T7)o##c*%DqdM"P2']<"&QpfGfKdiUo2[9OAkL?$f]ME-F>*G'PhMT"Qi#m4<-Y6&J>7!!T#]>TH
%?RW5tp8$KnlS5uHF-N=2`TsFm8^##dFXseigKi2u^^</7?A:"9QQ7O#UoO9O>5$gNj)_L1P%`tmFEcXt,KNV@I]"Rsqbe>T8-I\A
%$k":,]N<Yl4.3?]S3=Y=#X\kFE#f$/5WM^9-7eQKZUHRHr#kHmBAjZ].d))c4/Sn:&KU+lQAU#fYU^ClFdEk),-$7+/tGq\C0M&o
%`"=%2e1^!Z>(Vs.j*(-fY$-5,!N[;IgB`.DoH5mC:kIPN2<%&a\2GRiW`;<aSSmG0V@^5$ac%ChL?(h;fMj"07ng^Ec3042\*-1)
%k`/0G%tJg9DCDe2!fU4%;PG4[@mPN.Npd"Q^i#u7$dJ92:cQ/9jX="VFA<?rk3d#+_fptG5\?"Hnk#am\qIbfrWf,2eBPnRWXN."
%m.JjEqO2f&SbIN2JNA[5F?7gYbur(40s0&+j0S>`Pt%@Db(DiuPU_a12Y30Vn2?F&/!e4A1hY("'(gK@I,m#%[7d!'olQUC[8J4.
%$G%b6=/*@(XAtI/B:<.a;*`8MgcD6G$SV53GT_T]dAP&lQu&;,MZP"%NCY8_87NBp3hF`HABo;0)2UfsNTmLuUbd7Tp;MpQGR?S(
%ofRJf@rtKIKQ>7]Yf4go>*91-7R$8HX;;XX`]K?P9E50Tl`$eqIO#^Qd$M(Ei48SUC7HGc(m5a8r@engR*EP/efe;j,m[2!]Ub'Q
%h`1:EdD;B6Q&fJ:1_oY/&;<'^XO1uZdN##1!*^!dY,@h_X-)6KNe#HsVg[C.kI3iHNS/U3Umf-%!3$4-bp/3"=NBMH.2(?`J-2BJ
%UrN[PNt/V-_@iZL"[$-u<TBB+@B8j8C&916lsS\`VB"-gNkQ=#;)iP8q&.L+kV_3"SG]<3QiclY)+BtNX?q@Mpi[<+(L>)f5iqhO
%H8p[O;$4HHm:==n0:,N>"?(<Y]$TSm/YX(dmX8$`l^6(=2d9tD.jDJ,e8pjX"a$<7j:"+X+H]C4^">Z478hoM7.Uc&4$5BTcN`(%
%7jmNZ*RN(_k#i3%+bDMhf+e%J"p1/7%o5CQ2OJ6`fAeV<a`g<ici];]!=<hf+le\?(K*&Hg17cS8d7@S5TP<$>m[s/\<&6M4@>>$
%T<P)iq9f>@40S*)TP;Ka,-<qde*%Z+h"fGf3^Gj`rM`;$p*kfP8IOat@q[hnLLTq@,!<Q]l[D^s(m?k)_ocE9Q4,^^oVr-N-H2mC
%nSKc$cG-R5UQod^4L<&<U0>^]UU5C/;4Sbj%7ReYGcP6/SORfS0gLOS`=j&ZVc^As4b(gX!Ob=,Y1EGO,f6U(NIrJ*CS/\qCT:5Z
%,*->nM+,o4bLc&W)rAjs@t9o;b?X@1E-pD?6k=`S"IBR.Y?Q$\5tP+m[$MYh4X\Gndr6s]c)nPK&=S*qEJmW;A'srQ6HTt(MS,&`
%!#dq=Y'sJcTmV8^D=i.+#YZe/IY8kdWb2m0f:XQKOjnd#P#M61:Y=qF$o**"2'e>n7(7+[\kN]oe^+dq46TiQYsA&jVRCdbls>+c
%d"JsB/$`cc'\qVF%7JN>B^B*P36t"b9bn1U+<+t3Zo9L6d+@[KM/l;lh:,%N&DimsRphXeh_j&M0.R$")"a_h:aP5Kl^:Mnim78$
%J&f#+fV/=fEWIpt+mPu9T6Rl2l1e"JDq;E<5Z_/tVp"CYaX10^MUX.WaA*ACQauYRF&0KRmH_1c):ru%7%P3!frGDMRg<T,E@]pi
%LGufXW/P*A<\#ETrAF:uk1>YhD\q-e?0V?U*b)_sn5caFLP''lJi?mgRJF$DI%3Jj[@Su(]4nO#@Qm"Nkg,+i4UX^9ERIX@2<^7Z
%S;P9j/D/G,gs]eaG]P@cV.*:4@=\bK="GtKF"/Ns%V*2`'ts$'OMs12-C+.6.jce:CH*<6"c@?(`SiMn)X!ZjN*CZMaVr7[i&-l>
%NJR;MXf7CXKl"nN:;u"pg')Ci`Bn;]T@IuZ_VqgT@<--5,SLr=0U1$&hR_B,rIVMU6C=pA:I<08^/ln"4lj_J5$7Ehm\k[=Au8W]
%7U9n,`VRR*Su-b@;U=2\Hktp;DG>g[-bYrp_Nr)gRL<t1"-5;4A>/l2%a/ht2n@_sUgoOB)'!gYK6W]>2:Zp_rG3E7$t>FP=&YI3
%K!gQdI/'oUUY'*<CaO8FX`0%+"7'VU*QfS6(>?2pDBG<m('_OqF=:qO#2e#Pr)l)IY`tVNLOt/[@u31VfhtpY9dW9Ea,/kmY0#Am
%l7h^%-4X20?UGXV1$n91pB.;?@s,aQJhdHtWJ!EIMW%tu%u0S+<33E8c!3!en[prKCGZ!uJ4g+0bn\1\a1P_hWI>:TR#O9r=k\2!
%'F$<&@re#2\V9J"Sh1,gO*S^_/AMh1dJ!6\"$%QnNQ+\)g)t_\!=oQ8:r^/fi`R<4)gsbOB?G32o-+i&@bcSK0Ken[csiL/?C8jd
%E/G;0+7X1MZVq=F%.?sQ65i6ohce`2@Waqr0R`KR<%Q5:RST\ngWU?66+31Jg9t6@hRq`%`A%4,VN3XY9KG4S8DdZ$L[f:WA7dBW
%?E6.q+o1B?%jZ:CXY6DtHh5hFHAsj?"&`FI?0,k'q;,o_h;3JV2,o0ks*V>ehqcECqjjZ%-f<`tJ(S2Y9_$#imG73kg\m,)1!RCV
%UNsKMrpoI4jdl&3@f+u*]3G/ohbVNNDpKN.^>88WFRjU!HiO&h_qk%_ioJ;SmHr0ka`e8^He,mfI=$J7f`pjeXW&-U+4I]chgL!H
%+3@a9(]EUCKB1m]aA?^A^-C:Vn`0UhJ$D)G^YN5_Y-tfhPfiD@&(SNU]9A/Bqu,sNmLg-'-i\X8\\"+Jh^qUkABaO$k&@&u#!`+o
%#.'LP[l8fl?,,(Ld_U<omQ\PbP-*$aMf3f@Qe*uAn4'&:Dn`hGhsR[dmSCRsl0\5Wl]YP(X`r4$h8RLdp)M>geTZteh*9[dabRKl
%q]BbE*b<VMDf/A=^VAUlo!e#^_u9#al2b5+'BWTYNSU]'I!6`1H7Ll/>Rr-V6!)gQo7oJ5e91QV59I>C;?k83\,1+:)4#Q'ORA;Y
%aZuk0l4]N'CbBjXQaui`FPp]?3B=JoS8;=*AAc9/*I(G/PKSBUGC?QRppdisj*]28rqhmTq*:qA1G/*a(AOsZn<p`LZWuq`@=Ne&
%G5p%5B6S^L`#hm4rh+uF:_`mr0(n]0j&b-qg^:IUDQe_&hsBf,[eep!lHcme^"#VkF!Y$#a*)ZISq^aQ`HPM_DC@&9m;fa1^$ASb
%\h"nBRIAhNE*V]2DtName>A_0^l@05b?\BPE/=uDN!Cs2TMKkN[HA^"q+6(Mk@"4PZ9S9FWsq'\e,8er?emkMm=)\B<!^UUb6gjE
%iaol1Huo&qqh#ks6mmcaSK*qpXm<%fpVXqi1=,m`p0m\1?RCefBd:?S<dcT!ER32.l!)eS<nHFR^UqI\?/P[*n^2))4RtFhJ,TB;
%I^f)=ZFB^<J,$ir2I9h,=C%#:<p@AKPlJMdYC?+aH:a*6FSXo'UT5iHBNJtNa/d6,2>5SKXqe-=\^nDOEh2/u,P9=(jlHiW^s>'a
%e]QFm]j+4@<l,&BokD+*CK$k1RC.+]b9^Q>M9[DKkBaUZ.sL:0DWB$<q6f#9IIN5W^@e&crR.nIWF'uq/Uo*QWe1[c'\Fag!Z&Ao
%LLiFSl`^\.dRi'c-8_uAS$)"F<HHlqRks<9M`s$R`\-t)'i3jZ#,$]N[;FXMG3uRuD:e/X-d8o4]!gq:<O_DAUcZ;/qR0c)Vu9'h
%a"Non]3HsaQY3@F'is_%?_+@F:>KW*g7Bo]r'1H;Y#dAh@FK'gA^K483/_G:=b!k@>G%I7pqcttRQ*AjgW9+fa^*&-S_Oh')S+Hm
%M>F=-S8C0Rp#^A&g+51reCAHrVNG'\`bk!8[6@f5f'E"nHF7(^qfO8^DWT!b3ir;6afnjEB;_6Jp$(`*l?%=*T6AYs.'3oU?<UR*
%<i`RWB!mrUY?"<\743M?X%)sH=&/T=Uq8`nDO,)&lUlKY00AEDPl:n*"XfL=ok46#?d$NlA:46fPAuI8>(VTX-R2]8BAH$HnPmMK
%.3mQ_!Sg*]h]S]\A?;j*XPLt-T=-8<JR7K4Q.]j)+S4TGTW35P2fUG@[>IVF\Lt<GLJ814Rnec7g=VoQ)k#_bRHp]nGUG9hRmq),
%$SBk&(!_Ifej:N1Tp&gHV%pRUKRUS\;&q-9ju5V4Va=rfTsftc/u$^"&3=o"O-Md?g0>#FY(Ti&Tik6+KS"hQZ=j6@Wm?@8f0\dR
%U&/0I5V&n/Od4m:N<j'\[3a9NlUZb8<gO5QXM$%J;'%@5U9:Nj2"@.ahUBDiRWoE=KZ1./=fI:EXN`UUqYD`?qP?HFDe=K(h5+#W
%rQH@f2e61]i+J9ZXUQK]^e+ms&_(oKo2`5W"cuVS;Va9R,_XENeuQ-XjV@/tGbmXNM/\sn]aWk=@a55i0L7`kpkPisCWWWdX5haa
%(%#`A3Wc3XruCr2SD'FIUuE)\ELJW0CVgi\2^TMCY#e,,'CBOn"Rs_nfGhbZX!1,c.$QDN)LANE7.fb8.S;=UE2t/8#iR$U0j7&c
%6H[Jb]T>%WOA9@1*A/\B$OX`D6@522;%3o6Q%c&-9,EpG03_[s=^3I0Yb`nTEf#(UM1>u9=DFbQEZ5d!(`$D^m"V@gF7pee&8]X>
%RO)0ijYBO$d>SiN>)jO@FW'X)QH$SY]#_Ac[\ZZu*:*,ScS@"=A3Rl5jqq-2=Ycje*7Mj31=P5e4oNTLXpX=Ag'[D7YoK.`daj#1
%AR]64==/cgBY://7+^9D3mf]Q1l^Uqo[6c3GHaD#;3TP-=&J-alclJ?=fdXDb/_?`i8r$bCXo%VN?OeA9,JRIS5[%!ogt$;T<GE-
%g>\"/ASRO\W2VJ]r9/1-f8S.Ef6AP4(I`GS6A]!/^SOch9'GkGK^2eiFjltfi><UE2C:Fl0a^?>U$G`IF!h#-J"iTm\/'oSJm4=h
%M"!3D*lI<b2F1)?c9e6LnqGT`0S'5I(&gr3&r<,(QQQqOT!T2q%E?Sf/VGW>!j"j.&fQU^$-9oSi"5u1U*#qtam`e\_,,hB"dT97
%H7TP/63:3'd!C6q90<^'f(du*X?#;TJipi1]g//3^o%4^!fI^?KHWYEcqHQ>S]6hm@Vs7s&0@)N`hfYnCT.SS@njos:iup(KDN*R
%!kFW;S<4*BekqP<<$baOm6-2-<^0R+N@:'WOJnr,$,S!_E/RJgE%+/#8q+Gc7C*V9G/E#9kIF"a(MA$8).",#lYKTHkL4%lk4+Bd
%R-(TWRDZ,JI-3N-I+=ad^c@:BUY]Sf1NQ%1^ZM'MI'fE!T(@ImfVGdB;q2sie5q@(T#Q78qSM(N8,mPpA`OBArG^6gp1PM+qTP>Q
%N;)+@b?2sA)3=K%X?"^aj#f9C*9.X8qa\SF4a0aa4FM($9?)'0\^mPAFE4MS[EM]j(F4@JG@\)"78V@pT0bJT1<NHheLIUJXWXf*
%PZ_e>!-/Y`%T<(uJ,LTnic]XUPj>I5`o9VH$bRD<R:0g&dDQe(NikTPL]*XBcnjdoUmBL-rtQ-`b..&+fE)"U.R"k%:&cZ6BF'2Y
%'uI42pqMi>.!Df/2PYBj'6^nu)Apor3PNRraX\eOa?@@._+d3NSgpQ=cNX%H#9Y[%;R)HT-\MV?i@%OK8E24opQc.4Pf\g*jBC+>
%e4?[-L.Yu&dUs$N;.bZ+V'BqEQ&!t+k$!eJI\9onXBom7YE)P^d]7=;;X-NJ9@I0-*k.;SQH%ECDd(:#EKuol2:XGG)fEGqJsca_
%V%JO0s0XXa2nJj5anTJb?eKR:(I]qg^[P9/-JN9U=_G<3+Lc4_)#SME[saQeb'hmk1!U&k^k9a_:%fks4>6_f)e16ah\6@eA_6(,
%l`@aHKa@6se]$Y:8q4Z0,7;m4FVn)1<,GOQP]C\2fa$cNV?DQIH:Hhjg8^o)<-d,X?<Tt?Ng-mr?(J!;'WMe79-`q$mXf`I!1P2j
%QB$OE,u?Q(AfLj6#09PiliLQSBQ=/rF99em5g=%<r-h-,^H)>r(K`64rs'#6T$Pt]V;c0Qes%:i6kU59X!=5*[[%lM'eS%LEe#GJ
%`l`PHg5lNA1Z47OZtnrOM@:+Y8-gB4KS1$R/Jqs<Vuco\V232,iG(+-LOPY&S9-"p2I6Cp&9BkkXd3&sgf9Fgb]nk],OoVD>RN`D
%C>>>/`o46,.+Za7WINo6Gmq+*@^Z<BnZ^qR,.=SH4DN<62<[25c4b(QdZ4Y*DWmeDGe:'IL4KG:%?gaoBDJ`N?UWX\lTr@8$f/2>
%E0CU31u\sV]UE$d`cTA>O=-TnAf+59S!rqjV:U"3L:fS%]IMC!S6M*\X"pm%Zo4,+Y-U!cX&N/8>,uF[fYJnWL)uiEY#`N3p+(:E
%V+]FG?L#u)W8mVWgUat=KqFD#ZuKX:a0fpI0c)HfY]AW'nD>j&oFb7N(R>sQ-U'CoXSg^qZ<gZc:V8^XBB@P;B<25_<U=Jf8pjig
%pTd2iR3V#kL-1ZVa-Q=1F#]W#0]Jrm[eFdE#(CkVEMs@"eWQsCNn$kdXlKJ@'+\\<M`.0?EIq1323hRGltT4;@0HGN*EGI,9[`6c
%,:fZ/oK20Q!tRRQ]d)ceV61U7CTnVpcjQ6(BrUjK5K+nAd/NM>*3q&:^f'pH<]u&LG,,LXD,;t.A/<?K9QIFDMo/.,91E-:_`T\f
%IZTKR"1^CVN+iHlPr!Auj5DI4$U3D`ZZg#o]Zulh(*%ajO@GhBP-:q1*9J]p;9eo^Pr:8YE3,,H><iBe4@r\@X\"t]"qLI>1oo/]
%mWW@$d(>uo6g'3D>sm@q0m7kS0S\*PA73F$27E?UD1[DJE#bTLL1q(;XMeb"&[7CZ)X1+6*'uU8g!Z9>T4;S48rS=5Ro*!PbB'E_
%WR6c;`duVf\5Q\[[a3Ag0$;aC?M#If@BuVHJY!J#XQ^"E.hp9*\3o3dKhJeLb0nWk)T^hWh4lie]h'/$/QZo>=Ng*q2JoGk1j#=D
%XR4S,?^5B=FJZ-SKj<$!\g1&:BW#\2=H-oj$$<Ct.OQ&SeVVVNA?Y68Ku8%%RqPU,CM0(kS?ECL@A#4&d1'<Lp3]>Rm"Uh=;`\Jk
%[)r$kWSs@aWRs(Md0>Ir%'%Z,S@-kSce.nJ?++_+XpSA?XX3Uj`,$5]FqD!2@+[2MK)!p8^8H[]USi7Gc1[-/ilE0GfqgJd]<_m#
%G3RErSD)Yu/RpuS[`u@RB-?8tYO\&.#P[09*h;#-F3=i+nu+24GfDk//rsC\G7P2P_<"r^]k)j$a7nNg*h;-ZI_,V6(Pl3KZZ+DO
%]lscCO1f`D4V-uMdVh(S`*N)jD5[W/Rb_LnN"<(23lg-5,Q.!AN\K!CaJDNoo\aRJboUTl\!:8YPm#4tedgQG6K8o0i0"nZc<`L%
%^D5V7Q"`n5hj/A]B\kR1d@C2uDsq?ICRQo(_1b'3nR)j#)$_3VC&_?0#nMS*?/^3-rGne"Q+C::J!YS9NTkhCelRpdTB:)MYF3O5
%*I)%[73@7jYRd,K4H$7,9.fhd:jPS%>TEI2/&m(oKA?G<G'R/]BArZ6'OM=$/-"`d?u!H%Zj,Dsnh/A*3:S[`8tY0U/H(N5nhgc[
%:iE-))mcqXQtCqWJ4G.\WeNiGK(2E,Y#&5nM"%-3<]KN)R-.EfKSkL,;Y)eXIoH&#c2%'rheDRB%K8N^n.E\d+5a'o=`"RFn!h2+
%RQRY%8+o^T(9C;`*N_P!p-\_=gHYA3rEQOpTVeE,A'\`[>I$c,g!d;eW@uthe.;7>g)i=*6P!)l9?Ui`\!/)'LA3'%>_D::0!8X!
%O=\Hjd^;"1<Ou5M<Q6mj,FaGOV?XJ.ZXXM?YpcO0dR^9E\IOqs9oaL&>ND!,[;j_s&`:tP;,A^e@u0c5LB!#pn7CA[X\1Z4.U,K>
%aaTBOL$W.]ZJSUWf,:!Y./O7kT4PcGZ8:Lk,lPdSIuF@3q^%15@DDjp(TX81C:Qu@+6Lu'L-"lB&%(uc1_rOAMC>K'qS3-iH]+U:
%@tT)\&'>0X83O^:j/3MfOSM*]-mk_"g9dVQ5?c<>2]t';2P@L=GR\>g,#SM<"%m@%GNW+,I+B/n,;QU9=jfC$A#r)R-lO&/Qm"3.
%Jmbd8`9(pXCIYTmL;>S/.pA#i$KJ21%>W&mDalH^SU%LK,W<JJ6[Vo-pYkIiN6-*F6p^WC^.PCI.)-fISh_37j.:KMp.<Y6\s>c)
%e2S4Y^gqF!(R5Os0`1>VToG2g@FWd@\!<(SVqLdJb1Er/qT78^Y'+iR'nl?,7os7t6]-/pW$_q>C)$R+bU=G^!iduqB3W;?obK]c
%<[E`[3i-/a0i:;;<+SGb/@J$CUPAQB8A/6&U_kI*Z?_jJV,l(pf/[;TUO'RB:%<8!aJiS8m:c#gN1c?AV,:2`QEMj*C5Ab@(f7.^
%HD`ZEm>K&c`hKLXUT7S<=#%!.e*UO#/j2\a/NHb%d5]]ij>iCR0ol#Ha8GS+SadifB5D9=>9fnAP?3(72icpJ7M.o8Uh?gDZolou
%TH3$B`fWOH=J2R%Y;1-\q&^gDqN4e2R<L#jDa<jrW#m/X!6kG7/]Pn9liqf$%nCrb(96QXZ>`.UA!'p_(7/SE!je"lmhV69X0mc-
%3XCU-Y(S_eWai]h"97gOq5>dUbM]nNTpXAML\GK'#EI@s%"NiZ$5d#tm!9F_>),-_hB4D8Zk;1`G^9,S>,A9=U(Bq@:%@k"X?`EG
%ofc%X>)RI?,r=Ocki7cj=l>Q=a$&<V<^-@c8rn=Yf:#[ZXa\JPR\t'Vpu9tp:;<t0Yao40cbYC7G!X3Qg?'<oB?I">13`Q0R:7qt
%3##/#[_\;2mta*_Q.'!fr/TlU]\3htg1h/q^tWY;)aJ;]BpJ7KK:q=23E316qT>oZTAKLM`P)e1b+SQ>dmb,&K2A-hq1HTVd#E#f
%jA!9Gfu,R&&gW7SfJW55D&G%OR3E,n?Ckk8!C<SpNp65(gZE3Ho3AD=[6IR(e9Dgl5(1H+LcdR^K4F3B=O\-n)9U4DZbGoI[FR[4
%hX0lTQdg8A;jb-#(N;<Q!@J+kl,4YHpl#L!)3H,]#C$,TONnP\4XS/la@2%lJ5g^1RikK:pnpL7a5U>-3Wa8X+EnL`K6qe`D@M2G
%&FDL-:Xlo`\kL%<6.ZfoWMg=FG3(D-"md"^4bd<-6hAmQ8,ZuQ68FhV)0RCC%A;OH6"uV.AOSks)fJTp@I\)#SDB_)i<S%X38L;_
%Cf4B\Qk%a.J?D0GU["GaX[@Kr_%g9q0j7gsSA^JPnghfWQ3S;W5MlJuirV!fl-on/PS<782ip%O7+dnX-p'IcB,u+I]//W?F?(nA
%l@GCW2D9."4mJb7`X-OeRqr.q]'7(BHX1Y.,t#Z(<.PL%fi^6g%[@'80q0G\%T6%SV.lUnG]VNmp97tHf6Ce,XmV$Tj'CnU=r(<_
%gVRVY\6EPc8>GQVK?9fD0hh+0F!(MG>nCLY5rF\P)oi)XLnN90%:g%d_]]mXSnet^7?LuL\D_[knplZS7eSMGaH,?@E[4_H8j:Mi
%>\-%g&<0r7,O82F)X/+j_K.$Y$:;Tc)I8EM=Ap>-*(38%%>SRUZ@9%VAWH+sAF\-I*mrhtFf2a@5&&E4KdY&.fJXUj[TPM`30,62
%UG`5)FT98;*f&,hbW2L)Q@%i#R<iX@?d1?5N(/pfQLQB&NC>?>fqU:2+/<Z4C2tn=YQ!JF%PDH?"]2d."O-Xul,n?N;N7Ng)VVaE
%]1*u5S[4k2CPkUJ&IH$5KOT'm;&a6,GK%jh?KODtAmE^r\)NDg=Gt^-]X"*<?<4T(_+iL+@DTf_c\*&W%6@q.i*b3X$r]hiCV(64
%Ybj^j'cImSBtHIB.WmE@,`3GZc4p.f_'%:KP*f_4)8>&:4nR&)AUg4tYWQ'X_?%I9^u3#^Pbk49ruF*l!UV8>CsPPB4Vhro;(2dk
%?P<)tNAI.o)385H%qGXc$EI14>7FH09E)[G.hrl_`KhF+O;J@\AB@Su@Hr\VNblpnqDD0a<!\_N"cr#`I38.QQ]HH\M;`hRguY5-
%2c9LO1d7gJcR[^JT1+$Mem)2:@=73VSK;$g:F5C#+/1\QLN/ghnXRL>pucl)qtT^e=5b$c6pV?.B,nhg38R6lDmEbL!L?b+mKOU$
%K__!JQYkGf`;5WVB8BYcpr:QH4XVcSC"bS3G7Bga^g$4>*(R!/R]MBeZ?ms!3SD-1ofLjACYLR6)`Z[p4&MEDn`bao@`G#,nNNXW
%=bJtN##,s/I!7-:knYN@oud]@-*gF4@BW_gHuhLLV/;6`9R'_=$VP13/a_/)hQ:0=caIr%q,V7VCg\ca0ugt4q,c94^\HW"n\t4m
%qT[9G0R]6oH'IW&!B$GD:t,+Acn"']#,WVHHNJR@[$qRr*X05LOXro+!(l0;Ka0l.$4gKs9W6T7i=aFX@hfaj'e1Ws%'c*9AB?6X
%-odu8J7'dc3\c2I`'G"?.LM=]:bc?EJ-&!g^FZZ:fmfb>N8&0bpn=a'W$=YH/Bgu/j&?h+J=d"`.G/)`+73d[3D7hbQJ*O-D]JV^
%2W2!cRU[4]=PAoK_UpUp4p:==lZtjVci$QrL?j$R6eO3*goMgd&ZZLF_VD[(EHJValLNKO?6)DPL1("JCE0Ofl0>8qX/f'tCd[9q
%rCoa8gYJ_O2]9#6/Z@MfI/ckMhd7R<d"3]YNoG<8TKuIF%NBdPB^hAAPk9P=f-gTi$*ntF)"&oX^W@BAWl)ZP\j-(<^.-O=4gHXL
%dC;YrlP,>KpE0pWOEBqag5D2u<>!!(;`[P1NS3ET!6>$*-WfY]3ZCLTX#m*8&m36Xc:IZFo\iu@jdL<f:&i,-M[8FhjY>JO[@FX0
%Q'SH@>c0S4R+@Y!H#%-EYTQk$F\a_*9RkB8_m4,2f`SQ/-r4A6Luf,1-Wlm[r`ePkCW2;k`YM@hgdK6_<ER9"&fGK51N)jOJ0&go
%,j7-1ik1)V<^b\7`7gW81iKNmF*u7=YpCVqf+_V=,!iY5b@&pGY*s1#4uG'k64+p:kFUWiKp/i1SfsJ#/C!QPm:ii^:_`_AYD*$4
%CUJs>'g0[P"'*?<KFUCF95t&BF%/G/GT:g<!X@XQKhGV&V-p9\2%e(c4/MJa69P>dIsZ#)Y>O>PG<PkpeG.m(q7jfg]g'Ds_./!M
%k6*kc/PX4L'-`hq/%^]0$$0Nqq1J"\1Rk2[7t7k)8<68>$uW%Q>LK1R*GW9%3MZgUDE3`Pc/@\aE,7a65\peHL25F>Q8b'DE?W5S
%.d@\$HgT12='C5]!R;b@Oq.B9YUr"T9om6tF^@Y,Ug<]/i852*-5`"uj_<T%5O@^.g"B/bK/YD`mM-i8ZH"rXYX:No1;'bU*h>9Y
%nhG*g3dW)Uo0gGt[\P9+#`#F)et3l&E$?tuOYi,]&&C@4%^`LS.4m]FNh/f2S)-hJK0]qD"l'9o,oOV9<J7:>oGR-4E0OlAlcfBr
%9OZj%i#g(u#i;8F,OpaJf6EHk$m?.2)qsT76B-I*+R%-X@hL-W%9r91>>OU?SILW#qZoPT(DFsdS"kt@.H>-rR%oTVSieR2nQNLX
%WYj.%A%SK@MC<0_;+8%a]A3.PTU(-\K.Q'PeWIlJa@QD.LLVEr$W%jWG^lW#jF*$<TVjsTG%[n%;lZ8h8/E&Q&]>d'ZAN&Qd>87-
%F"02F/=qp#09k)QjBBl7dsFQNeG/+ncX$k&P8`'KCl$!pQUU?2q"K/q@n#Ilq;T*`@V!24#eurq:2`>Kn_&=a:[Uo6:Pu9"K6S8=
%q8f_E([q0gmdPNs:!`8G)qQh%ZR9N;CWQCX8eHN^-h-ppG<%X(Z6/D:Q>RBP5.FA-U#Em4J;8<>3-KQbpK.aR(`NlUcB7nA0?#g*
%M.^ocKC?`7*oRso(WBg%j23S53QC+W+rt<]?ILam)$@p(.DNr4^=dmRRU^O3EFF\6kB8IXmo@s5.Vl#h<ms$$Co8)TiDs\&C"0eA
%p5je@goV0MI1qC2"7gn_h7$bBq"/u<=!s5tIag?u]WXJaFZk/F[>VZG/TS0md@4RoUrRAXf[6Su9sOHj`DNU\o?/=UX&m66^,co!
%X4s,QGV/gPbD5Dqh*%JuVcco3;soKl(Gt[c*dIsLbXqc2G<2(G$pPQf5)1e'0ZGnqia3<l5JMjL\XpOpHGL*bB3R7F`cj`h:LO`#
%*J-9%`Bgqf\>)G5A*bqCNra_9!YN:fo23;\6DhA('+uaT8okl2-mDgW"+L+X5;6WBfL4,DiY+a/__0V@*j_&Rb3E<dZs,HXUcMm!
%&^@b"<aSP2c?j2*4K5=+4(qiF]1nK5dcqE[c;)!Om,6VSmTSN#hV,BNk%8<hD"Z3mis[Tb)?-)ab3/TjaKY/mg#BPXI^@nZ%ZPkf
%C\Cp"gr;jfM4sC7f:c8+?P`2ikDPq#G[;6eS>1L>r48t^Gj*8G?K8fq@Ic5:cBnM.NL:#aqt(\Aj3R:L]rSX..HSCq#G-GF`;>Tb
%.`>GG(t8gmmW%6UaRn9uX694:'g%r*-a+8?JI'^Thg/GnF'@lk_C-(Q[tBra#4(F.$7<p:-LZ8\GZ^Z_n&7t5Zp?!P48nL:i?<MV
%S%^Ij9bBa6/IlCN<SN'KI"N9>oQh:$p!`CCZo28sETKCl\:/>=s"AZg;4O.Tj<k_,GHed)Sqch</'rhVBHH7uLRDJ)eje<c3RmjE
%\h2\3'#a]'D#)S[6GMTL5VmQe@1*;f!kn@7`do.h%q"*3S-8J)X29fi5o/u(Y?H>jRfX)\c):L;&f(X6_.T`#<QisHW@_On8Jp1p
%Ou6[MGf&I\%M/$R:8L1mBfYX1)?9U01+#>!n8V6JY<T/;O$2XY=+5C=NR^0,;3/!+GnG#jgj.AgMcfD&+3ZoahH]UqFa`>lQkLH\
%8%h&7+Bda`DZ<4&.=V8AUJhE[HB]Ef=ll6%CWrGjF6R8$Hd-V.B%:a$N_/%JNi:C80.&Qg093#0"aa(Ie(\DTJb"dUI#Df=UYDk.
%LZ'fUr;Pr'IS9,b^H4J:("BA$6`XVicL6H>hmL'IQ?.=(93o3dEB(OEQ&`#i$ToG9jn!3\F`Ca2`m1kckL]HlUT<ap+F4q4cRp%E
%XW!5$)U9TWh[NIZhQO3+#?BllZ%XOIF%XG/AZP8QYlEnUSWdp`g_gXdBs\mDVZ8FQ?#&X_ctdrB1]T0dJI=_9:Um^h)[.8>,m^.F
%R'O.@4UP$Xh/iE6pl,:f^_2/1F`_HdrI;8V-_EW2YnO'`Z(krC!2R%^$S2/=qmlIE!I,$Wj(rfMPt"iWm1".)76kAL[O?=hfhif5
%I^;QWcMlc-(1e4N45P^9N+Cb?:2br+A,3"?;FfIUDfJN5=t&:b>j,k!KoU=7H$?S:BkL`AroU#AD2'ttVY<%tm7To3Apl0Mn2MEX
%3#qKKS?Et"[.a'p7m$,N@GCoeL6L;G1YIQ4f\:KTHTq)le4s='O*u+ng:G"8/Z*U?Mt>JSPL\!:'@hlEeE;jB["*XD%lg&8U)Q!A
%$p,>^rJ"puRd;U_J2oZ5MuuoC2(UX&^B^=u60AMq:3RN;2ZVM+s%9o$`i7BuQMbpDim!5BSVHBWL)\-s-;%D&pDCpJI_B-mX`<HL
%%.-cD)gde-Bmti2:s+P8j?lPh=g9U9k0hoMMs%$K_u1ENgA#6r,W:$kpsW1s7h\gYkXoUJ4/f1d22l6Xm`j4;)N5`[G>AT`Pj]iT
%ebD:6`UP7(<cmkLIrbhI\MLssJP*^0&18ST28@YLqm[eEbD$h+3EG8N[6ug_S.`@\G,^<99;BZZ1!CsQVbAu4I2>"pH$HO\@!<Vb
%0!!YalKW^KeAf'TKX4NG<dr@LUipNs<OJd.$e($*],Bu&`a*#%3E=0p)l[pTA8unUEjC'FoD;KFmuK,I+#<H[nKhi0]6K)OHc'a7
%iH3Z;$npHk2&pdNRn<5FdAAniW]Y^(gu(.FP6S!S\KmqK^1VXIO\P462S$\UI[9(mHEXKb<S&5TK.Gd7WE[#2GBfVFn0ZuM4hAO8
%FR:*[HjeV>ia*_`7lIm/LUWF0j'Xep2]PA:W::DDote&mB!"9XeQm3nMfs*+*U0KTNS\=2H(=:TehAR:UeR<FpjS+S%3\9mEIKR[
%,b"#[KjG<9jI9Z<2h'/]a226$9B1`'`Ej>@e253C.XcT8P81=U22j*WAd]gk.9%f#)%,7A7\)\jqdHGU&H,W'a5G[4KSgf,pWE!)
%J,TB;IeT>NC;2q3,@[Q?h`1ZP3)tsWbg-7o`V%lo4-(Hg3bQ1N-Fq51TB!gO&!"]T#*SKW\`KmAe+)<>,%]T3lm995r5/*sOPI;6
%"MI?.ih5:$`8t]^"]p:$D*C!lSW?N[nc@VL5p-q3'WR:l.usDu";s?s.qe[^'L7J6%$'M%hFh:1B>P\l%n8Po)</.@D2A_R_G+&d
%A3p"CW=0]*%YD4,_)^iU9'gmNp(8VE4\`SeM>&jsSgIcYliP2J@I)GplC@nMOdF3bb>!G5"t*!f2kSr3Isu`iI=HP@h9f)VT?:M)
%r8?&5r6=PGT5X2eGIQ0*X\Q?,2\4g6\)6QQXGUq47dK/#[-lm?ZnV1<hgWuhs0JO$5KWkD&Ji,gI/P/;ie$q'gDBW*'jPH>lM1Q3
%esDT.VWsDUB&V&M5Xmns\Q7)6bBsgj2>aODB"A/8-2qbNT6)rjFEgRNn=`;.igIhRHbd:#hfi^O^V_:J5(^kfF!3]D3u0%-LPOQ,
%HVfO=D<KaICOZ%T\nFF4IBjYVG5?O+]"om148W+2D+lO[O8GetH%bR#3,WNr6@\?p/\'iDX*sg[NuM4fMf[Zl=g`?LE1[hcc/adI
%mTSN3h3ue6_bu'?!#Q6\]DB&&qcZYRb](dW^fr+skr0K7fS!K0H/=C<eCG#+9N?0'2',gBp0&[%ouF1bgkC\P-[b7<Hgiekd2nJA
%g>be5ksB\-X+'oQWK)[*fg)CH+I!F*LHBC-KcYX/Uk7N&]9jCMIG\QpNmZG`?Q0lq.M&`FM/FT/F-5T_^AGJLq7Da3.;j@sEUT]O
%M1!bGFMDn;Q*A>7?iF@q1M9n'A26XA9]&?GbF-q0f>uYZ2=KIM3J&\9NNuO3eY,#$?;+>@99Ug,XbD$BIP2!OB,]1-.#NLf%_e"f
%/nZYJb(g7ombhkPgF4p1!!du6B>0^*-th6XP=e6a1^Dp]7@Nd`)5hbg24hP58ehFq.!SAQC)@>KZ4VH,XM'CTlqBC.r`8'mYf^.$
%X:jKt``_XI*X^aH@jtknS(-Q'AZJa9Ag`lA(hULC3)%K%0pJRCc>X$G7h_"@Fg?[Ni;>h7b3:f&8XW0a&HjC>VEaub&m!:'p$nmp
%n'@PR0.AmD)3otH7\u.Nha^<cBA.Y=&-kN%#N*]nR5-RR&\7,:rp]f@jePT1&N7ghL"P"qELL3iVATM=qC]5^<t#'">'2>il",b$
%pDAs$/aZTQQnk5HjL8hkaG%P#;Rt.i.[2]BgK+l5W[]^Xa]I_Af@e6Cbg6Z>5Srti?_OfYn):dU.sk%:K]I!tL>K?*oW)nk?'kA7
%b4N_K,GM4N:(j<`q!NIeAQ`]C9VJXJC(GX3_Wc9<8"Y$*aqWVB4'CR&'>=I'4T4+B5)NAhB@b+0&2Ao5Y]YB`]bNki9ce06q-sI&
%M_rUCQV@6jr$HKAb\mFLiPm";^et9%O'p93c&^J7jo)l\o1%V+W3Y)!63f78Y4+6tF-XKGKDEI>IdjJJSi#Pq&Kj6h[;&764m#^7
%Z)ciq<$T89;rWM7eF"0+jXe6qmZ./m/6Ht&;(1Q6Fo(4#n3&-=G@>'Q\*>fDi5QgL^U6M0U5A&cE1#<n/H<(U6@X$^%sT&$G0=p%
%`ZF8`+oXrUSJ7@3EK`0cY6?KN+n-:,h!\-PHBSGdm2OEIh(K185pgKt07'Z^8[GK5<d*!8Z=f5fj0a6J6H`j'Rs^K$.Y<E'!g-oQ
%Y':8"e@r>9P\"t60(eCP2B\>\6PS@,ZB-:e_E+eM*!3*SVA&+NPF7%->,e3tAIfl,#1s')[S1q99qSoR$a+82(ekB/;3=n*[&4fj
%WO9A1f>`-Z4SonS#HH6m@XYd4Bhdn6a=]]B=k4cI=gY[%k5=(YS&8nAIV%DO0W75@*#oZVaFRkp@NOW3Ddj1uQ\t<kesOfc"%:>D
%;DHd+NQsq8H5M*eq=`UPU+]*Q;b/gomTT9[3@mak^lTLa<I>U!"(.#:hH,g^8saguag>R]Nd8msAY7,u[lbZ(>stHD^I9d-&%2,O
%""ig`HQBYk>g_,s_Zq5*S%"^-f2I'%%6:`0)b;X/]orK8(^_6sZ.uZ462?7BlJnQ@^K?2XclheJdlChcJ:o7LWF+'^np-[8Xg>=.
%[N;_L=a`/E'<O3k=Z<RPc5+F8AMcmm%#c%oX`>O05-rh)2CQ_c>Q(BY/kQu8aK.W_KXX&)M->cmR]7>C?[eUGY&-aAbI3H+.+q7'
%h9:6\k)^keH;tKG#s\;j$RSm=WC'<\Ki(odZS.0c^_3#QcmIi5p=0^UrX)Ik=eTCiZ`S74F<Ws*DFdL0ijn0SOW5jQAIu1U[%&Nm
%cP(3TQ(XX(C3RBd?d/"+[9I^`>c^Ru.PdYfnPYA&/j(L_`cNtKn6,Ug1\,.g;):k"3fd^$=#jhAT73!9HYQm7[<X4p*(p*ODQ>]W
%?`[6XLm1[L%H=JmZ.mN0B@:Pd"l\.p/B_4kATK)',6r"&<0<Q-A]W,%k:p6tjfPY8@VM2Y-f?>r)3l^eeK4:n0L/TL`PPGa)!Xdj
%e?!sqYb"mrS]p%#N<*EV/qDVg+(H'k=8AnQ'F]sD9'CfdffmT*AWgX,6q3^Te>;*'#ps?r14u=Oipm)SHDgNqh&OIee7QjK=rh^9
%`AC<0aeUC7:']P8WQJ@df!IL$pt\A4g5sfUE2'8j^@ZcS_j\cHmfNd?=X#>"a/<\f,1/Lom;k#h$Z/6,4Z+sZ+8+VNKGs[nTj!0_
%*:*k3TnY7p<*;+*WK)l4IS-\i8T^qF-u(Bu2*KT@*Z(Bur%`R5%Qkq;rGD`DD/:?JIS@(mb@Dr'hr[6r%KqQ*7Z+0q96Cts-BYGp
%h?js6Hi<:s-ZGj6'2AhYARjs!]+2*C8!BiR^+AN,HAf<I;:(sJWFT;c>aJIFPLC!$daQ?GJD8c[fJZ39<>#Gb(pd3Hfa>[K:&pcj
%E<Oof[F"4(6%l+*BpQ1OPq<sNH83fBV8QJ,\BN9Se_LX4[j]E.oaUJCj$(P>HDn$O$D`HF`F)ZLT%*V49Q*RdhA-a;)%#p;H!Zis
%]LmmX/9n3@O6_oV5EOr#.EL71Ni.UP$AUlKD&>&=PUA/YJQ`[t,!.UEjNL)t+pbD/=;M)T<htC464:0h$*.#Hg0_E_5]bZpQ)*mB
%Ul<>G'61O?>_u.-CPjLmpVa$D8Ca2a5%l7+539V*\J=M(DQ\1JS_m\cJI-2g!m9ahfUd[W,'5O:G#aJTHq(i,p`7&YPA7;D9WMC"
%As3I[1K3g>k3=LVDLA>&&hmn<P!1PSA$><'oj"0g9Ce1`Nuug:l+K-'jQ=C>V'/Y<K["bh@En.OR50+heXQ*T8rN\r">b5A+:F?e
%dc%p)2l^inBP-+doGuK*>UWJkQKls%^j,K;"DZhm5pLKcc_-erU:!s+4as-pS@5^.b+Q3tT9o;K]N!k"\ZuuUD.>eYFO>lqc3.)d
%)?O>kQSDBa$#jkX3cN3`RPHV7_P]UQ\\Z^a$#?%^[*XhOZRf-9.@He)cI2c'<p_6_O>>#<9i!=<!Ck0hN2Ii\N<V=#\"&3;UOU9?
%a:aD::e+HNcq+\F:r-:Gd1B+t6dt3uaWeMgI@n0rd_=@0mS'%MXc)6!l&"lC%O>7HLd89"FhsApjpAa3Jg;]1D;f@fX$/Y";8'`^
%SLH?p3@Z)cR\P"Lo'Du'!Q+V@j^DJqS[2nSa>0eXU2AeF])G9h.3mVjRJUZ3)<fdu2O5rM:i/A00kIZ52N18+B>=%31fCjdOHmY@
%]b+,aKW`eUc+(Hhne$el;(b)E0kI43bL-ERnsRToT)CIB_S_lVH6!Ng%'-K?fOum8k%KQLn^1ltb/8<V;W_XJVGD^)foS_CcILt.
%8=?5=c7R%XeB-SobQYH5d@D^"FUh*hMK:uX`5O'!rrkeY$N\V/Z&"2in+DM`=f/9_/uG>gHl'dtQ^Xfb@<A:+NG=tIqe(fnpt)"B
%^f)RBWbn+cZD#Bb//(K31/e`PWcHnQlIbc01DU\"45Xm1&fqla7KQ/VThCfK1!WmsS;`,b7X(`R;4Z16s(q0]RZ<Um)WgV4E]Oh2
%)Vpc97t[<N>Y`?3iOKaX8+lo[E;eUA\+oOnp@@V=%a]Zf"(OjGi5):9="LOTQkh@JjS6e?=XRZpF)lrX<UEK-7-Xk/o,`8`)R%9(
%,FotQJ]nK/PUWFMaZYeo.`j/c-6$A0]ipI8dW!5K4lSc8`r;A5?U!\ghd'JZnofAngKlPI]%lVmcXd4?"X.I)e"r+?T`G40(_QGD
%'/HQZWlVN81Ij'h2Te[(5FJM>+IHROCTL^J$n]L5+h+a,"%68>o&0'']]LN#%(+O4o%=d]O<*h3]A?R&bP$SJqh[M;DFBh#?J";O
%ijhDf>GelT?h!WjlsI0FG>F8TT>ub"7)'7,'qQk3NQAX!6ka/O$Q"ul27gS)8Z[0%m4@3CRIV<u+@Bj=redBDi\<e>?T/^LY8r#,
%]FC\.3/&NZTnnb0=$/,###H2IU0UN],;S#r%isk;W_Th%-^f3S;Q%s1BTF73mT7Zehd?,LRBn?%>Wk\RF3g=k(W/bnTA:]-.Y7O(
%Z=[N0alHrp,/iK(aTeTc=\=/5`;L_NZ(/MWa,^$Y..o/g#,c#@X"ZiPLp_'B4<ZiLc16L"RDbo@49a2b]R#Gp_78XuAnPP:M+8k@
%BKU<;JobtRGI)R9r3acGp;:<fCs&s(3La<@cS!d?NT2&h$tR:U7L[52kZlsFo9h;.f3-<^s64]RFa68hQda)4HAr&SB1-%lF^eY1
%i`'^he^CdNSoTc,"82!&%;:"]Q^.]R9;ALn,5M7fr8<!Cmlke.G])_a+iMYJD260Cr%Ej#jP9fk:Qf(B8!_Kj7.!ac]/022N6jq/
%j&Y6Ugn2V/;>-f57-HX!?5V7dh)b6"L&A.@`cGWJ4+9t'ft6UfH^?M$rjKJQs76.:d6p1ri8e7JDgo@]\&E9>Uq^7)^>2!>n,MG"
%Mj$rG=1cFijIS"XYMS\kq'M9YTs1>o)=Lg`Hl9,>q)+fqJ/)A2o02&(],1M:i<P8SBatbl]C`RGq=?uCq0'N:1"JgBrasloO1tT[
%m^g$Fh;2Mq>lVjJ<?hDY#%@)?kN<'jgHKZ4'4o@ldaKQbXk=2\i3-i^iVXl:XalI]GJ!f&'mhYWpumpbn%QPDP\"L`pE-MTH/iZ>
%Yfgm9\It(6Z4_8ien)PVmFJ.,Q`_6<fT'2@F#GN=G_Gl_s6K5fO-^oIDEKn.UhIoHJF3NI!).6n"^mXUR1ss.$K.\/hsL.s57Wa!
%.U^A%2(=\0^`oA0ZVn&Ae[U]>k1f0+gXahW!t_65i\Z@pg@K.E%?8e;X.)Ri(n?]n)0q)d::")(@&'AIG@@:Q)Flp(d0Q=?c>-SX
%n[RqHb5%)65H8n<.PkVIok\u[]9o@uHAER+auRuRLLg+#d,mi*ln/K/;o)tW<[+\:P/7F(/>R:>[M@H2Yb+5ro#1NVqsZsjck$c$
%8C:5ergVZu*EMKDQ\Vk&RYOm/'57eZiX<`]g'6%u*b&o.4B&!VZb[fA)iX3DWTmNBkX8-7AZfE32SY@K#g$^Ooq*4iHob*jUX($"
%7<IY3TOMdC:NnQEh7L;4r:0@SO8C@XH)6C7QqY[QXc2WX]BbC2m=_`,EFKW?I<N69rbaZ''ul4O/rgVU5+7p3Z"MaDNnH_GQ,l>%
%3&h'j1&O<_XhKFD>-/9p9M2^g`Oku<2=fAV/9pXCMs\LFG5lBtZXo"pT&.,.]=V?2>>Mu:./V!P<`8&@oc(-YB?H;'IAD@bhYaU+
%[N`DaBZ82bqOXeHi-p99=^uJTO'Z00Q2\h`m:-<&je0N(Un6O_(+pec?;eAES].L5M3l^H/]3IcS,Zemc+&F-;Ogt]U+2&t;8MFr
%!L.3[q)Ue?M'0hN#X:_kHHSD0s6cB&pCBA%mH3Bpa4K5*aMX;[2fEjIdmcNRVYe'2k_He=(LQ"Ra>+am?pA?_q!n&ab8bFRhu<J?
%LZFrf*[!]HXNJ:?B+*n&*rhJ*5:l>fk@jbe_X[*c"8(nUo-]khUs,0)H+Mi#0>G-T^A\'%I'3E(^ZS*M;YK@qU(?-f6=pORTd#Yk
%FE@-Kk2H/Gn`BN"\&cR[B>pDpl&JU/c0\LcNQg3`s0188]\O%m3G0iQr7C?'gD<TU:KMIPp6Tu)_sA.!3W5,@cM$#IU,i.?5)8]i
%XYX1ml^RL$X53IIH@&F$_+De"VMq^FkKj@@[m+$8^]".q:N%k/qX('Xo>5A]I2b<9qRa^:J%F?@b8j+JhmM\+^P3C#X)I-=pgHf0
%b<,R>aiEu1dI6fo]hL_`/4BQ_2reXs^V,^Mr"?-1hmjJGhu<CPDSZ8B*(&a?g4k(omQ1CIEdr':E;Q,-i[Ja[eoc?8k2@B+rJggM
%RpWn<anYe<]tN48g$cZ1h>a<Al1();D)C>BRqegkqX*)S-9j2l^VX6jU2Q6MUY#rXqpGFdIJ;"^_qk:9eNZ0:GM.*4=.#<'Q+?/<
%:VZkeL&D\m^&-RP-+YjC?G?Ji4'\aObF`fsSfP="JpHF3qJUN3b0J4naSt?"O0Cf2gX0faao5=&R6'm$ViB<tNPGGboOf&H^LV1-
%/7qq!)W01l$M7Y@DsuT=Ci:sBk;W:->LCT31S$XTlZ[)-I+cb_LAAc=T\\Z&\tTY[hHIAHfpgk=$IQcg-:EV.mVfSdGAfp<\N^$b
%Sp5Oc\@_[B<)^1a=c&`KGJ;nMCj(#Jort@Ob3nebh"AX(CNk4#E<#XjIdtDN::00,s5KT-06VOuqhLnBh2D^>IO?&uF%,R<CN`u8
%^>2.0^QoYkZJ<h<]CU@eM)X2fpA006"/@V1&,5tEleUQLpS[m)hKjBqHh59OIZN<5^;#%G@gu]8-^j;hV#AUSH$d08gYMk5>MT.\
%]6t(cna<Xc&SqS\1=KL:Beh?u?62n7ZkY0:RWl0QqdZ)+QmUeZp7brgbE!I_L\mQ',J3l;gjX]n$g5T>!uE>WhV=0AY=n`&^);7,
%\@grPh;$D^OD7"YT^_5AFQd('Q3asTjQED3rQ4c2h6$O09;?3ZF.p1!Gpk.QJ+A=PH+A>HiqnpTA%),Q,2`tRYGHGhpG[-e5Nif1
%,Ibil^E-ST%4njXB)gVH++A`oZ+PM%'E5Yf];Eb5@W+-4G)#k'a74OY7@pQ@A(*HV%s7&pM7L;!^V-]FC#fKXmn!6rr'HZq8@n,j
%h6#03TR]9fN[&m6:9B1I8c^esP_9/8f6;[RO*A\N%B*'>-140MZ,\Z\nT`9<B;P'A!Bn;C3oS3YMpJmkT\=g72@lfen)FLq?QmTV
%:t*DhmKD!A\6]Y?%!".^`L-9<0;(hfUpF$WqkCBpX9-m%RVU\bG+9#[<DqgHO/LbnmXArIH^b5D^2I8m7I;!%cd5N]&GPm<WOOFC
%$m;1AIGkK!iD79\l_S_m6_FIK;%b4W,Vm7'X=U9o4LH491_Z(:!U7>,Pp;QUO-(mfQg82WP'+,IeUPb/jC)I39210ma7roN.Ppt:
%klfID&(9Fb8hk%<)O?\)G5..t0Ff]#)^m5h(oigo1'q]5><MGXDddVXf?RQJaM0l^rU&)TfHfg'rIb0.KT89?f"O;H0<`YJ#A4Q;
%2cld?_r:K]`kYBrLLQ\EDbP=@4Chk>X8c^@)YWoUiSX0RfG*0@amSrgp0r:Hb@LI?C48C?o:1C`2<X[bXT=X^_Z0X,.c>+Sg*D_<
%K*4s">Kt5-UOV^5BnCOt`;5XDa1Y4-NC9e\@-eD=8m87@6ecq2.-EJ<ZrM:)LP'fNIUk%\^D$)m`AdHEnQ:tZ/(K'GN^%UNeeIaQ
%Q%X<26W:aI%MgN0&jW_4Tst)[mI!i]WMZH&a9Ic<50i\r_tpXs83!F5g8b!NqW8a)7fhr:k5Gj1kA-ou-.dcj)%mqe&g=hNCi=/Y
%g6E/d^\fZnl=fWopFRB\ITCJhCel[WFKa%B8O,L'M\:IcBQd=&Y?_#A2Jcp!TTGhjQa+pQe"KTlM(9LkQY!%shI9D#1Us#3b?naX
%F,RGQ38Al`#@+Pd<t8YBBpO#[8J[Ht.8J)bH'<EkJK2>I6>!ciA?Y@[4\C:Ym8$6!_[gZfL-"Kq[a%22C=t/_HbgG^\G^Y4_%S[`
%R]<LWUOtL=e7>XXPF!pS0k*Nkm<i/mI]bSb6C@oQp3oYs2s6>].:4DIp[C<Jm'heCJ+>'WpfTn(J?ktN^Hh>^.lc4<d2p1?SuVqc
%&Q%s;'1Q#*P)5RM2#t2L*\*\Sk!0!iV>![:pVsSOp+2G)1rL%M*.V).>Y\BBDO`!]7<'n2mR5gg@Oj%V`.7nV8N7H@#`1A>M7AC]
%!bCr*Q;3+V5r]TqgnnBNI"gU=Ja-D."cSaJR4dSN?UP=t,D<M(btaX>gfl+taPTm;&_h[($lLlmjTL]Po17>G7Z?"C2NOc<(qc#E
%bu*RV:M`OS2T%)9q)0Cdj5P"Y$c4W]<DBM:S>>8h"n$Wi2TCS.=0R,HMif1B/_kR!.)t\5GjM2h>6><QaH6?tF4NVC\,^8d9NkR^
%NbojBB>[=mX,7!a_Q_Km^G)ZTFUM/DVN^7b=0X$P>;=PC*Y)9G0hY8gi]\pMB2E=QK]>`.WdG::/XNM,<@Q2Y*>W-^6e@t@9E_T0
%E6#U>X+ZW7F&Yc>R7ULui_ZRAN%=H*L`nGX7EB&/fbq.>g*M^J.)?T(3urQ@UC0>?&sn1^-':Tg,cKaT^nM1&+Y%$c1TMNS/"KoF
%#/SoG$j2]A'ugDf]acB$Hq>*191*^jcrCtF$(iZ$e`9(IBLK);d*JZs+<sa]"He$#&hK<HB^_RQ,bM&7i^U-tJl%l#l*OSb39=g5
%qJ_DR$8A=_=&4RAqj+F\<ahgap_M&A8Jn^?/\c^ePj35GU@=,n;d*Q1YaB*a9(JsHT-9F!)%GC),Hk_;,T8_LHKUSMAg6aj?t*=G
%c,g_YeFir(q4fD\@LG3s^<R0Qce[.&pnpm`ofhaE*)'=V"&g_V41moaD[_g@U18U"&C-<.0ChQMEFjU5@:VsO<K;8kKLQFfojPOY
%Ba6L=H(<o(Nm;E(9KBC0mLb:<;2Y_%88Kr]dGsm`),"U#:l8cIb]&bX/0N/2M_J<sJT+70d%hsOB]h^ak$5(`=]@gYW+h-@0l%G!
%0gK5O-Wh6IJn#MbO#te=]_CmV+]-[Bs+e8eHoS/2Qe/"]<K(G78epI&4`aBOqVgZ9XM,WZNq&J(o?$2H;WFouVPED//U`>N7[*)]
%h3j^:gcPR&Vpo.'IJ^oWBC.@p/"7F~>
%AI9_PrivateDataEnd
