11/08/04
******** Version 2.1.0 beta
	Added (minimal) support for user defined priors. The interface is

		int glbRegisterPriorFunction( double (*f)(const glb_params) )

	Thus the user defines a function which returns `double' and takes
	as argument a `glb_params' pointer with qualifier `const', ie.
	the function may not change the values stored in this pointer. Example
	
		double my_prior(const glb_params in)
			{
				some code
			}
	
	To use this prior one would just call
	
		glbRegisterPriorFunction(my_prior)
	
	If the prior knows the difference between true and fitted values, the
	true values can be accessed within the prior function by virtue of
	`glbGetStartingValues'. The user defined prior is co-added with
	the builtin parabolib priors, if this behaviour is unwanted set
	the input errors to zero. 

	Nice sideffect: This mechansim can be easily adapted to have a detailed
	look at the steps the minimizer takes. Just write a prior which
	prints its input parameters to some file. To make life easier the
	argument passed to the user defined prior function has the value
	of `iterations' correctly set to the current value.

##############################################################################
In the mean time I've done a lot for module support which still has to be
documented!
##############################################################################

16/08/04
	Fixed BUG#5.

19/08/04
	Added support for building rpm's automatically. Use
		configure --enable-rpm-rules
	and then type 
		make rpm
	and when done 
		make rpm-clean
	It is also possible to use different build-archs (targets) with
		configure --enable-rpm-rules --with-rpm-targets='i386 i486'
	The obtained binary rpm should be relocatable and a source rpm is
	also build.

15/09/04
	Added a comment on gsl-devel and RedHat/Fedora in the INSTALL file.

	In order to have module support and to keep the ability to have a
	all-static version of GLoBES I had to restructure the linkage a bit.
	The problem is that a module for GLoBES usually also will use 
	functionality of GLoBES, if we kept the scheme as it was, we would
	obtain following link graph:

				my_program.c
				     |
			       +-->--+--<--+ 
			       |           |
			my_module.so <-- libglobes.so

	which obviously is cyclic. Moreover if I migrate some core
	functionality to a module, I would obtain, even worse this:

			       +-----> libglobes.so
			       |           |
			core_module.so <---+

	Therefore libglobes is divided into two parts, libglobes
	and libglb, where libglobes carries the functionality of
	the former libglobes and libglb links in the modules, yielding:

				libglobes.so
				      |	
               			core_module.so
				      |
				  libglb.so

	Unfortunately this requires for all non-standard installations,
	eg. without root-privilege, to use a new linker command, which
	can be found in the Makefile in the `example' directory. In any
	case it makes necessary to re-link any application which uses 
	GLoBES. Sorry for that!

	libglb and all modules are to be found in ${prefix}/lib/globes.

	If an all-static version is required it is neccessary to have
	libtool installed (only on the machine where the linking is done).
	How this works in detail will be described elsewhere. The advantage
	of a all-static program are two-fold: debugging is much easier and
	it is possible to run the program on machines which are lacking
	important things, like LAPACK. Just compile and link and all-static
	version on a machine which has everthing GLoBES needs and then copy
	the binary and all `.la'-files in  ${prefix}/lib/globes to the other
	machine and you`re done ;-)

	To complete module support it is of course foreseen to have 
	user-supplied modules. To this end a documentation of the module
	API is required, which still is lacking, partly because the API
	has not finally been defined yet... What already is there, is a
	helper-script `globes-module' which should make it straightforward
	to compile and link own modules (which involves building shared 
	obejcts).

	Finally I have also added `globes-config' which is a config-script
	in the style of `gsl-config'. This script knows everything about
	the actual installation of GLoBES and provides information like
	which linker flags are needed to link with GLoBES or which version
	of GLoBES currently is installed.
	
20/09/04 Now libf2c, BLAS and LAPACK are embedded and can be used in a
	convenience mode, i.e. they are no longer required to be installed
	on a system in order to compile GLoBES. If they are installed, the
	installed versions will be used otherwise the embedded versions are
	used. One can specifiy the options `--enable-lapack-convenience'
	and/or 	 `--enable-libf2c-convenience' to configure in order to
	avoid using any installed versions. This is useful when compiling
	things for a target installation which is lacking those libraries.

	Improved configury. Now only one configure exists in the top level
	directory. Especially the lengthy configure step in the libltdl 
	subdirectory has been removed, the neccessary checks have been moved 
	to the top level configure. We now use autoheader, which greatly 
	improves the output of make. The new configury is much faster.

******** Version 2.2.0 
30/09/04 Added support for SWIG. SWIG itself is simple, but the support
	for the Perl module turned out to be rather complicated. Still
	no support for a static perl module. Added a directory `m4' to
	keep all macros needed by autoconf. 

	As basis I took the AC_SWIG_PERL macro by Brian Shire 
	<shire@tekrat.com>. This required some hacking to get it work properly
	with autoconf 2.57. I added a check for the CFLAGS needed by Perl.
	Furthermore I removed all MSG_ERRORS, since globes should build without
	any problems even if SWIG/Perl support is broken. Thus SWIG is now 
	treated like e.g. bison, so if it is not present but e.g. globes.h
	has changed the missing script is invoked. Compilation of the Perl
	extension is conditional upon `--enable-perl' (default). If anything
	the Perl extension needs like shared library building is disabled/
	broken no extension is built. I found it difficult to figure out where
	the Perl module should be installed to, thus it ends up in 
	lib/globes/perl and the config-script knows about this. This should
	be sufficient for any Perl user. Just add the following to the Perl
	code 
	
	  use lib "perl path as given by `globes-config --extensions=perl'";
	  use globes;
	  	...

	After this experience, I doubt wether GLoBES will automagically support
	many different lanuage extensions. I could imagine distributing the
	corresponding wrapper files generated by SWIG and leave the gory 
	details of making a working module out of this to the user...

	Static modules, ie. a complete encapsulated Perl interpreter which
	understands GLoBES would be great ...

01/10/04 Added a nice perl example in globes. The perl support could still be
	refined (typemaps etc.). Moved the contents of acinclude.m4 to some
	files in a new subdirectory `m4'. Perl rules and rpm rules work
	now silently together.

******** Version 2.2.1

10/11/04 Fixed a problem with the convenience libf2c. Added the inclusion
	of config.h to wsfe.c and wrtfmt.c. Fixed the includes (f2c.h) for
	the lapack stuff. The problem is, there might be a working libf2c/
	libg2c but no f2c.h (RedHat!). Or the there is no libf2c at all and
	thus no header. Furthemore some typos had to be fixed in the 
	Makefile.am's. Fixed a problem in the support for libg2c, in lapack.m4
	there was a misplaced bracket in AC_CHECK_G2C. 

******** Version 2.2.2

25/11/04 ******************** WARNING ********************************
	works only with configure --prefix=something
	************************************************************** 

	Added an example which shows how to build a all-static version of an 
	application using GLoBES. This is actually a bit trickier than one 
	would usually expect due to the use of *dynamically* loadable modules. 
	However, libtool and libltdl provide a way out by the use of the so 
	called `lt_preload' mechanism. It is absolutely necessary to specify
	the modules which will be needed by the application at link time. 
	Unfortunately, due to a silliness of libltdl, it is also necessary that
	the corresponding `*.la' file(s) can be found during execution. They
	will be looked for at the place where the module itself was found 
	during linking *and* in the local directory. Thus usually you will want
	to copy the `*.la' file(s) into the same directory where your 
	application's binary lives (NB the `*.la' are tiny). 
	 The actual example is to be found in the `examples' subdirectory of
	the tar-ball. It is built by issuing `make example-static' (after
	you have installed this version of GLoBES). Then you should be able
	to copy the resulting binary `example-static' together with 
	`glb_prior_module-la' (to be found in ${prefix}/lib/globes) to any
	computer and execute it there (there are exceptions, it will not work
	on a non-unix system :-)
	 If you want to use the Makefile for your own purposes, make sure to
	add the following line  for each module your additionaly using
	
		LTDLOPEN += -dlopen path_to_my_module/my_module.la

	Also have a look at `example-tour.c'. It now contains two blocks of 
	code, which will be conditionally compiled for all-static applications.
	This one at the beginning (outside main)

		#ifdef GLB_STATIC
		#include   <ltdl.h>
		#endif /* GLB_STATIC */

	and this one inside at the beginning of main

		#ifdef GLB_STATIC
  			LTDL_SET_PRELOADED_SYMBOLS();
		#endif /* GLB_STATIC */

	This you will also need in your own applications. The conditional
	compilation makes it possible to have the same source no matter wether		
	your going to use an all-static version.
	

	************************************************************
	* FIXME -- examples do not work with normal root-install   *
	************************************************************

07/03/05 Version 2.3.2
	Fixed a silly bug in glb_multiex.c in the setup of the smearing matrices. It was looped over the number
	of rules instead of the number of smearing matrices.

08/03/05 Version 2.3.3
	Fixed the bug in the parser, concerning '$binsize'. Fixed a bug in glb_set_up_smear_data (glb_smear.c),
	which made it ignore user defined binsizes. 

21/03/05 Version 2.3.4
	Fixed a sign error in the beta beam fluxes.

19/04/05 libglb now is installed into $(prefix)/lib instead of $(prefix)/lib/globes. The built-in 
	oscillation parameter now are the same as in the documentation, dm21 was 10 times larger. 

03/06/05 Version 2.3.5
	Fixed a bug in glb_lexer.l The consequence of this bug was
	that the include feature in AEDL did not work for files which
	where not parsed by the first invocation of
	glbInitExperiment. The reason was that include_stack_ptr was
	not properly reset at EOF. This fixes BUG#9.

******** Version 2.3.7

27/07/05 At this point we're merging most of the features which were
	new in 2.0.11 back into the main development branch. What
	follows is a verbatim copy of the NEWS file of 2.0.11:
	
	<-BEGIN-QUOTE->

        This version is the attempt to solve various installation
        problems and to increase the portability of globes.

        Serious problems have been encountered on various versions of
        the RedHat/Fedora distribution. Most of those issues can be
        avoided by using the now embedded libraries needed for the
        interface to LAPACK. libf2c, BLAS and LAPACK are embedded and
        can be used in a convenience mode, i.e. they are no longer
        required to be installed on a system in order to compile
        GLoBES. If they are installed, the installed versions will be
        used otherwise the embedded versions are used. One can
        specifiy the options `--enable-lapack-convenience' and/or
        `--enable-libf2c-convenience' to configure in order to
        avoid using any installed versions. This is useful when
        compiling things for a target installation which is lacking
        those or where those libraries do not work (e.g. Fedora Core
        3). Moreover libg2c is now also accepted by configure.

        We now also have a 'globes-config' script which takes a few
        options and allows to extract e.g the linker flags.

        The test for GSL is now performed with AM_GSL_PATH which
        allows the user to (optionally) specifiy the path to
        libgsl. This is especially useful if o ne tries to install
        globes in presence of a uncooperative sysadmin.

	<-SNIP->	

	Fixed the include files for GSL, thus using
	'--with-gsl-prefix' now should work seemlessly. Removed the
	'-static' flag from the linker o ptions for lapack and
	libf2c. This may slow down compilation but ensures a prop er
        build on some 64bit platforms. GLoBES should now also build
        and work on 64bit platforms. There were basically three
        problems: old version of autotools, the length of integers as
        used by libf2c and C and some problem with a relocation,
        which seems to happen on platforms supporting both 32 and
        64bit applications.

	<-END-QUOTE->	

	Also from the NEWS file of 2.0.11

	<-BEGIN-QUOTE->	

	Added libgnu support to have fallbacks for argp and obstacks,
	since they seem not to work properly on Mac OS. argp.m4
	changed such that argp is only taken from gnulib when absent
        on the system.

	<-END-QUOTE->
	
	I tried to solve the problem with multiple definitions (they
	were the main cause for GLoBES not building on Mac). There I
	run into a new problem with SWIG. Somehow SWIG needs to have
	glb_exp glb_experiment_list to be specifically defined, which
	really looks strange to me. I hope I didn't create any bigger
	problems. But Perl support anyway is optional.

	BUGS #5-#9 are fixed.

	Merged Walter's code with support for more than 6 oscillation
	parameters.

	Fixed a little problem in the examples Makefile, should now 
	work for all types of installation (prefix vs no prefix)

29/07/05 JK
        Added several functions for user-defined chi^2 calculations
        (in file user_chi.c)

        Added global variable glb_current_exp that remembers the index
        of the currently processed experiment. This is necessary
        for user-defined chi^2.  

01/08/05 Version 2.3.8 -- PH
	Moved the module support functions (glb_modules.c) into
	globes/ and thus into libglobes. Makes linking
	easier. 'configure' now accepts '--disable-modules' in order
	to turn off module support. This feature may be useful on a
	variety of platforms. The glb_prior_module in that case is
	just linked like an ordinary object file. The mechanism I use
	for this should be extendable to having more than one module
	(even of the same time) permanently linked. In future any code
	using modules has to be conditionally compiled, such that is
	only compiled if GLB_WO_MODULES is *not* defined.

	Corrected a mistake in the Makefile in examples. The static
	linkage case was wrong, why it worked in the first place I
	don't know but the error made it break with above changes. Now
	it works porperly.

03/08/05 PH -- Fixed BUG#13. Now we use realloc, which makes the glbCopyXXX
	functions pretty featureful and  should fix the memory leak.

	Finally, GLoBES seems to build and run seemlessly under Cygwin/Windows.
	However, without support for modules.

	In glb_modules.c glb-modules.h is only included if GLB_WO_MODULES is not 
	defined, thus avoiding a warning about the redefinition of GLB_MOD_NSP. 

17/10/05 JK
        Renamed some of the functions in user_chi.c with more unambiguous
        names

26/11/05 JK -- Fixed problem in glb_shift_energy_scale (read beyond array boundaries)
