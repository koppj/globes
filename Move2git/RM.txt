

Organizing releases, branches etc.
----------------------------------

After doing a bit of research, I can imagine following scheme for
`GLoBES` release management:

..........................
                 tag-version-3-0
                  |
                  | tag-version-3-0-1
                  | |                  
                  | |           tag-version-3-0-2
                  | |            |			
  debugging -> o-o-o-----------o-o- <-version-3-0
              /    ^           ^
             /     |           |               o-o-o-o-o- <- version-3-2
            /    bug fix     bug fix          /
           /       |           |             /
-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o <-master
              \               \           /
               \               \         /
                \               o-o-o-o-o <-feature-foobar	
                 \             
                  o-o-o-o-o <-feature-foobaz
..........................

The idea is that all active development happens on `master`, however
only changes which actually work (at least in some definition) are
integrated into `master`. Especially, the API should be more or less
final on `master`. The version on `master` should always be
usable. New features and experimental development is done on feature
branches, like `feature-foobaz`. The development in `feature-foobaz`
turned out to lead nowhere, hence the branch is not merged. We don't
delete it, since maybe sometime later we may want to come back to
it. `feature-foobar`, on the other hand is merged into `master` since
we want to keep that feature. The branch is deleted afterwards. When
we decide it's time for a new major version 3.x, we create a
corresponding branch `version-3.x` and set the version number in
`configure.in` in the `version-3.x` branch to 3.x and in master to
3.x+1. There me be a pre-release phase on then `version-3.x` branch,
the API may be fine tuned etc. After some time we freeze the addition
of features and API changes and start debugging and testing. Once
we're ready we tag the branch with `tag-version-3.x` and make the
release. Bugs will be fixed on `master` and then merged into
`version-3-x`. At which point we tag and release a minor version 3.x.y+1
etc. Version branches are never deleted, although we will not merge
bug fixes in any previous version branches, but always only in the
most recently released one.

Version numbering
~~~~~~~~~~~~~~~~~

On any of the version branches it is fairly simple: after release of
3.x `version-3.x` will have versions 3.x.0, 3.x.1 etc. On `master` we
have 3.x+1 and will count all changes like 3.x+1.0, 3.x+1.1 etc. The
next release version then always will be 3.x+2. That implies in the
current system, that all public releases will haven an even x,
i.e. 3.0, 3.2, 3.4 ...

The real issue is are feature branches, how do we count on them?
Adding forth digit? For instance, assume `feature-foobaz` is branched
from `master` at version 3.1.0, the its first commit would be version
3.1.0.0 and then 3.1.0.1. That requires that not two feature branches
start at the same version, which I think can be arranged.


..................................

        pre-release finalization    release  bugfixes
         |    |       |       |        |         |
    2.9.12->2.9.13->2.9.14->2.9.15-->3.0.0--->3.0.1-->   version-3-0
    /
   /	
-2.9.12->3.1.0->3.1.1->3.1.2---->3.1.3--------->3.1.4    master
                         \         \
                          \       3.1.3.0->3.1.3.1       feature-foobar
                           \
                        3.1.2.0->3.1.2.1->3.1.2.2        feature-foobaz
..................................

The only thing we can't fit into that scheme are private feature
branches, on the other hand they are private and hence it's everyone's
private buissiness to organize that. 

Tagging
~~~~~~~

We require tagging only for release, so that getting the state of the
repo when a certain version was release is easy. Besides, we may tag
major events, like fixing the chi^2 bug.

How to make an actual release
-----------------------------

First check-out the master branch

---------------
git checkout master
---------------

Make sure it is up to date with respect to the central repo

--------------
git pull
--------------

Check whether all te bugfixes etc. are in there and nothing more than
what you actually want to publish.

-----------------
git checkout version-3-0
-----------------

Assuming you prepare the release of a version called 3.0.x, where x is
an integer.

Typically, this will result in merge conflicts in Distribution/

-----------
BUGS
NEWS
configure.in
configure
-----------

The solution is the exit NEWS and BUGS to get rid of the
conflicts. Next you change the version number in configure.in to 3.0.x
and remove the obvious conflict created by the 3.1.y number from the
master branch. Now run (in Distribution)

-----------
autoconf
-----------

but only if your autotools suite is reasonably up to date: autoconf
2.61 and libtool  1.5.22 seem to work.

Next, inform git about your clean-ups

-----------
git add BUGS
git add NEWS
git add configure.in
git add configure
git commit -a
-----------

Now run

-------------
./configure
make clean
make distcheck
-------------

If everything works fine copy

--------------
cp globes-3.0.x.tar.gz ../Web-3.0/html/downloads/
cd ../Web-3.0/html/downloads/
git add globes-3.0.x.tar.gz
--------------

Now, you can go and edit the webpages in Web-3.0/src, which typically
means to set the download link to the new version and add the old
version to old versions on the website. Now you may want to run

---------------
cd Web-3.0/src
gmtl globes.gtp
---------------

In order to check out what you've done to webpages. If you
changed/added glb-files additonal steps may be required!

Commit once more to git and push to the central repo

-------------
git commit -a
git push
-------------

Now log on to Heidelberg

-------------
ssh -l globes lsf4.mpk-mp.de
./webupdate-globes
exit
-------------

Check the public webpages! If everything is okay, tag your version

-------------
git tag version-3.0.x
git push
-------------

Done.